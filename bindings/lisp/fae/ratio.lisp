(in-package :cl-user)
(defctype ratio-num :int32)
(defctype ratio-denom :int32)
(define-foreign-type ratio-type () () (:actual-type :pointer))
(define-parse-method ratio () (make-instance 'ratio-type))
(defclass ratio () ((ratio-ptr :initarg :ratio-ptr)))
(defmethod translate-to-foreign (x (type ratio-type)) (slot-value x 'ratio-ptr))
(defmethod translate-from-foreign (x (type ratio-type)) (make-instance 'ratio :ratio-ptr x))
(defcfun (ratio-create "fae_ratio_create") ratio (a ratio-num) (b ratio-denom))
(defcfun (ratio-num "fae_ratio_num") ratio-num (a ratio))
(defcfun (ratio-denom "fae_ratio_denom") ratio-denom (a ratio))
(defcfun (ratio-match "fae_ratio_match") :void (a ratio) (b (:pointer ratio-num)) (c (:pointer ratio-denom)))
(defcfun (ratio-copy "fae_ratio_copy") ratio (a ratio))
(defcfun (ratio-destroy "fae_ratio_destroy") :void (a ratio))
(defcfun (ratio-add "fae_ratio_add") ratio (a ratio) (b ratio))
(defcfun (ratio-subtract "fae_ratio_subtract") ratio (a ratio) (b ratio))
(defcfun (ratio-multiply "fae_ratio_multiply") ratio (a ratio) (b ratio))
(defcfun (ratio-divide "fae_ratio_divide") ratio (a ratio) (b ratio))
(defcfun (ratio-succ "fae_ratio_succ") ratio (a ratio))
(defcfun (ratio-pred "fae_ratio_pred") ratio (a ratio))
(defcfun (ratio-negate "fae_ratio_negate") ratio (a ratio))
(defcfun (ratio-recip "fae_ratio_recip") ratio (a ratio))
(defcfun (ratio-normalize "fae_ratio_normalize") ratio (a ratio))
(defcfun (ratio-to-mixed "fae_ratio_to_mixed") :void (a ratio) (b (:pointer ratio-num)) (c (:pointer ratio)))