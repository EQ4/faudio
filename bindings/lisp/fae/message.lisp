(in-package :cl-user)
(defctype message-address ptr)
(defctype message ptr)
(defctype message-sender-interface (:pointer :void))
(defctype message-receiver-interface (:pointer :void))
(define-foreign-type message-sender-type () () (:actual-type :pointer))
(define-parse-method message-sender () (make-instance 'message-sender-type))
(defclass message-sender () ((message-sender-ptr :initarg :message-sender-ptr)))
(defmethod translate-to-foreign (x (type message-sender-type)) (slot-value x 'message-sender-ptr))
(defmethod translate-from-foreign (x (type message-sender-type)) (make-instance 'message-sender :message-sender-ptr x))
(define-foreign-type message-receiver-type () () (:actual-type :pointer))
(define-parse-method message-receiver () (make-instance 'message-receiver-type))
(defclass message-receiver () ((message-receiver-ptr :initarg :message-receiver-ptr)))
(defmethod translate-to-foreign (x (type message-receiver-type)) (slot-value x 'message-receiver-ptr))
(defmethod translate-from-foreign (x (type message-receiver-type)) (make-instance 'message-receiver :message-receiver-ptr x))
(defcfun (message-send "fae_message_send") :void (a message-receiver) (b message-address) (c message))
(defcfun (message-receive "fae_message_receive") list (a message-sender) (b message-address))
(defcfun (message-sync "fae_message_sync") :void (a message-sender))
(define-foreign-type message-dispatcher-type () () (:actual-type :pointer))
(define-parse-method message-dispatcher () (make-instance 'message-dispatcher-type))
(defclass message-dispatcher () ((message-dispatcher-ptr :initarg :message-dispatcher-ptr)))
(defmethod translate-to-foreign (x (type message-dispatcher-type)) (slot-value x 'message-dispatcher-ptr))
(defmethod translate-from-foreign (x (type message-dispatcher-type)) (make-instance 'message-dispatcher :message-dispatcher-ptr x))
(defcfun (message-create-dispatcher "fae_message_create_dispatcher") message-dispatcher)
(defcfun (message-create-lockfree-dispatcher "fae_message_create_lockfree_dispatcher") message-dispatcher)
(defcfun (message-destroy-dispatcher "fae_message_destroy_dispatcher") :void (a message-dispatcher))