(in-package :cl-user)
(defctype midimsg-status :int)
(defctype midimsg-channel :int)
(defctype midimsg-data :int)
(define-foreign-type midi-msg-type () () (:actual-type :pointer))
(define-parse-method midi-msg () (make-instance 'midi-msg-type))
(defclass midi-msg () ((midi-msg-ptr :initarg :midi-msg-ptr)))
(defmethod translate-to-foreign (x (type midi-msg-type)) (slot-value x 'midi-msg-ptr))
(defmethod translate-from-foreign (x (type midi-msg-type)) (make-instance 'midi-msg :midi-msg-ptr x))
(defcfun (midimsg-create-simple "fae_midi_msg_create_simple") midi-msg (a midimsg-status) (b :int) (c :int))
(defcfun (midimsg-create-sysex "fae_midi_msg_create_sysex") midi-msg (a buffer))
(defcfun (midimsg-copy "fae_midi_msg_copy") midi-msg (a midi-msg))
(defcfun (midimsg-destroy "fae_midi_msg_destroy") :void (a midi-msg))
(defcfun (midimsg-status "fae_midi_msg_status") midimsg-status (a midi-msg))
(defcfun (midimsg-channel "fae_midi_msg_channel") midimsg-channel (a midi-msg))
(defcfun (midimsg-is-simple "fae_midi_msg_is_simple") :boolean (a midi-msg))
(defcfun (midimsg-simple-data "fae_midi_msg_simple_data") pair (a midi-msg))
(defcfun (midimsg-is-sysex "fae_midi_msg_is_sysex") :boolean (a midi-msg))
(defcfun (midimsg-sysex-data "fae_midi_msg_sysex_data") buffer (a midi-msg))