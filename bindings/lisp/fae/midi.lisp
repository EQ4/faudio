(in-package :cl-user)
(define-foreign-type midi-device-type () () (:actual-type :pointer))
(define-parse-method midi-device () (make-instance 'midi-device-type))
(defclass midi-device () ((midi-device-ptr :initarg :midi-device-ptr)))
(defmethod translate-to-foreign (x (type midi-device-type)) (slot-value x 'midi-device-ptr))
(defmethod translate-from-foreign (x (type midi-device-type)) (make-instance 'midi-device :midi-device-ptr x))
(define-foreign-type midi-session-type () () (:actual-type :pointer))
(define-parse-method midi-session () (make-instance 'midi-session-type))
(defclass midi-session () ((midi-session-ptr :initarg :midi-session-ptr)))
(defmethod translate-to-foreign (x (type midi-session-type)) (slot-value x 'midi-session-ptr))
(defmethod translate-from-foreign (x (type midi-session-type)) (make-instance 'midi-session :midi-session-ptr x))
(define-foreign-type midi-stream-type () () (:actual-type :pointer))
(define-parse-method midi-stream () (make-instance 'midi-stream-type))
(defclass midi-stream () ((midi-stream-ptr :initarg :midi-stream-ptr)))
(defmethod translate-to-foreign (x (type midi-stream-type)) (slot-value x 'midi-stream-ptr))
(defmethod translate-from-foreign (x (type midi-stream-type)) (make-instance 'midi-stream :midi-stream-ptr x))
(defctype midi-session-callback (:pointer (:pointer :void)))
(defctype midi-stream-callback (:pointer (:pointer :void)))
(defctype midi-status-callback nullary)
(defcfun (midi-begin-session "fae_midi_begin_session") midi-session)
(defcfun (midi-end-session "fae_midi_end_session") :void (a midi-session))
(defcfun (midi-with-session "fae_midi_with_session") :void (a midi-session-callback) (b ptr) (c error-callback) (d ptr))
(defcfun (midi-all "fae_midi_all") list (a midi-session))
(defcfun (midi-default "fae_midi_default") pair (a midi-session))
(defcfun (midi-default-input "fae_midi_default_input") midi-device (a midi-session))
(defcfun (midi-default-output "fae_midi_default_output") midi-device (a midi-session))
(defcfun (midi-set-status-callback "fae_midi_set_status_callback") :void (a midi-status-callback) (b ptr) (c midi-session))
(defcfun (midi-name "fae_midi_name") string (a midi-device))
(defcfun (midi-host-name "fae_midi_host_name") string (a midi-device))
(defcfun (midi-has-input "fae_midi_has_input") :boolean (a midi-device))
(defcfun (midi-has-output "fae_midi_has_output") :boolean (a midi-device))
(defcfun (midi-open-stream "fae_midi_open_stream") midi-stream (a midi-device))
(defcfun (midi-close-stream "fae_midi_close_stream") :void (a midi-stream))
(defcfun (midi-with-stream "fae_midi_with_stream") :void (a midi-device) (b midi-stream-callback) (c ptr) (d error-callback) (e ptr))

