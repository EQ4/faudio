(in-package :cl-user)
; (defctype ptr (:pointer :void))
(defctype nullary (:pointer (:pointer :void)))
(defctype unary (:pointer (:pointer :void)))
(defctype binary (:pointer (:pointer :void)))
(defctype ternary (:pointer (:pointer :void)))
(defctype pred (:pointer (:pointer :void)))
(defctype char8 :char)
(defctype char16 :uint16)
(defctype char32 :uint32)
(defcfun (is-bool "fae_is_bool") :boolean (a ptr))
(defcfun (is-int8 "fae_is_int8") :boolean (a ptr))
(defcfun (is-int16 "fae_is_int16") :boolean (a ptr))
(defcfun (is-int32 "fae_is_int32") :boolean (a ptr))
(defcfun (is-int64 "fae_is_int64") :boolean (a ptr))
(defcfun (is-float "fae_is_float") :boolean (a ptr))
(defcfun (is-double "fae_is_double") :boolean (a ptr))
(defcfun (is-ref "fae_is_ref") :boolean (a ptr))
(defcfun (to-bool "fae_to_bool") :boolean (a ptr))
(defcfun (to-int8 "fae_to_int8") :int8 (a ptr))
(defcfun (to-int16 "fae_to_int16") :int16 (a ptr))
(defcfun (to-int32 "fae_to_int32") :int32 (a ptr))
(defcfun (to-int64 "fae_to_int64") :int64 (a ptr))
(defcfun (to-float "fae_to_float") :float (a ptr))
(defcfun (to-double "fae_to_double") :double (a ptr))
(defcfun (peek-bool "fae_peek_bool") :boolean (a ptr))
(defcfun (peek-int8 "fae_peek_int8") :int8 (a ptr))
(defcfun (peek-int16 "fae_peek_int16") :int16 (a ptr))
(defcfun (peek-int32 "fae_peek_int32") :int32 (a ptr))
(defcfun (peek-int64 "fae_peek_int64") :int64 (a ptr))
(defcfun (peek-float "fae_peek_float") :float (a ptr))
(defcfun (peek-double "fae_peek_double") :double (a ptr))
(defcfun (from-bool "fae_from_bool") ptr (a :boolean))
(defcfun (from-int8 "fae_from_int8") ptr (a :int8))
(defcfun (from-int16 "fae_from_int16") ptr (a :int16))
(defcfun (from-int32 "fae_from_int32") ptr (a :int32))
(defcfun (from-int64 "fae_from_int64") ptr (a :int64))
(defcfun (from-float "fae_from_float") ptr (a :float))
(defcfun (from-double "fae_from_double") ptr (a :double))
(defctype id :int64)
(defctype impl (:pointer (:pointer :void)))
(defcfun (interface "fae_interface") ptr (a id) (b ptr))
(defctype equal (:pointer :void))
(defcfun (equal "fae_equal") :boolean (a ptr) (b ptr))
(defcfun (not-equal "fae_not_equal") :boolean (a ptr) (b ptr))
(defctype order (:pointer :void))
(defcfun (less-than "fae_less_than") :boolean (a ptr) (b ptr))
(defcfun (greater-than "fae_greater_than") :boolean (a ptr) (b ptr))
(defcfun (less-than-equal "fae_less_than_equal") :boolean (a ptr) (b ptr))
(defcfun (greater-than-equal "fae_greater_than_equal") :boolean (a ptr) (b ptr))
(defcfun (min "fae_min") ptr (a ptr) (b ptr))
(defcfun (max "fae_max") ptr (a ptr) (b ptr))
(defctype number (:pointer :void))
(defcfun (add "fae_add") ptr (a ptr) (b ptr))
(defcfun (subtract "fae_subtract") ptr (a ptr) (b ptr))
(defcfun (multiply "fae_multiply") ptr (a ptr) (b ptr))
(defcfun (divide "fae_divide") ptr (a ptr) (b ptr))
(defcfun (absolute "fae_absolute") ptr (a ptr))
(defcfun (dadd "fae_dadd") ptr (a ptr) (b ptr))
(defcfun (dsubtract "fae_dsubtract") ptr (a ptr) (b ptr))
(defcfun (dmultiply "fae_dmultiply") ptr (a ptr) (b ptr))
(defcfun (ddivide "fae_ddivide") ptr (a ptr) (b ptr))
(defcfun (dabsolute "fae_dabsolute") ptr (a ptr))
(defctype copy (:pointer :void))
(defctype destroy (:pointer :void))
(defcfun (copy "fae_copy") ptr (a ptr))
(defcfun (move "fae_move") ptr (a ptr))
(defcfun (destroy "fae_destroy") :void (a ptr))
(defcfun (check "fae_check") :boolean (a ptr))
(defcfun (print "fae_print") :void (a (:pointer :char)) (b ptr))
(defcfun (dprint "fae_dprint") :void (a (:pointer :char)) (b ptr))