(in-package :faudio)
(define-foreign-type graph-type () () (:actual-type :pointer))
(define-parse-method graph () (make-instance 'graph-type))
(defclass graph () ((graph-ptr :initarg :graph-ptr)))
(defmethod translate-to-foreign (x (type graph-type)) (slot-value x 'graph-ptr))
(defmethod translate-from-foreign (x (type graph-type)) (make-instance 'graph :graph-ptr x))
(defctype graph-node ptr)
(defctype graph-edge ptr)
(defctype graph-node-list list)
(defctype graph-edge-list list)
(defcfun (graph-empty "fa_graph_empty") graph)
(defcfun (graph-insert "fa_graph_insert") graph (a graph-node) (b graph))
(defcfun (graph-remove "fa_graph_remove") graph (a graph-node) (b graph))
(defcfun (graph-destroy "fa_graph_destroy") :void (a graph))
(defcfun (graph-connect "fa_graph_connect") graph (a graph-node) (b graph-node) (c graph-edge) (d graph))
(defcfun (graph-to-dot "fa_graph_to_dot") string (a string) (b string) (c graph))

