(in-package :faudio)
(define-foreign-type set-type () () (:actual-type :pointer))
(define-parse-method set () (make-instance 'set-type))
(defclass set () ((set-ptr :initarg :set-ptr)))
(defmethod translate-to-foreign (x (type set-type)) (slot-value x 'set-ptr))
(defmethod translate-from-foreign (x (type set-type)) (make-instance 'set :set-ptr x))
(defcfun (set-empty "fa_set_empty") set)
(defcfun (set-single "fa_set_single") set (a ptr))
(defcfun (set-add "fa_set_add") set (a ptr) (b set))
(defcfun (set-set "fa_set_set") set (a ptr) (b set))
(defcfun (set-remove "fa_set_remove") set (a ptr) (b set))
(defcfun (set-dadd "fa_set_dadd") set (a ptr) (b set))
(defcfun (set-dset "fa_set_dset") set (a ptr) (b set))
(defcfun (set-dremove "fa_set_dremove") set (a ptr) (b set))
(defcfun (set-copy "fa_set_copy") set (a set))
(defcfun (set-destroy "fa_set_destroy") :void (a set))
(defcfun (set-size "fa_set_size") :int (a set))
(defcfun (set-is-empty "fa_set_is_empty") :boolean (a set))
(defcfun (set-is-single "fa_set_is_single") :boolean (a set))
(defcfun (set-has "fa_set_has") :boolean (a ptr) (b set))
(defcfun (set-get "fa_set_get") ptr (a ptr) (b set))
(defcfun (set-is-subset-of "fa_set_is_subset_of") :boolean (a set) (b set))
(defcfun (set-is-proper-subset-of "fa_set_is_proper_subset_of") :boolean (a set) (b set))
(defcfun (set-sum "fa_set_sum") set (a set) (b set))
(defcfun (set-intersection "fa_set_intersection") set (a set) (b set))
(defcfun (set-difference "fa_set_difference") set (a set) (b set))
(defcfun (set-product "fa_set_product") set (a set) (b set))
(defcfun (set-from-list "fa_set_from_list") set (a list))
(defcfun (set-to-list "fa_set_to_list") list (a set))

