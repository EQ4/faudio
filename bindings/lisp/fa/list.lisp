(in-package :faudio)
(define-foreign-type list-type () () (:actual-type :pointer))
(define-parse-method list () (make-instance 'list-type))
(defclass list () ((list-ptr :initarg :list-ptr)))
(defmethod translate-to-foreign (x (type list-type)) (slot-value x 'list-ptr))
(defmethod translate-from-foreign (x (type list-type)) (make-instance 'list :list-ptr x))
(defcfun (list-empty "fa_list_empty") list)
(defcfun (list-single "fa_list_single") list (a ptr))
(defcfun (list-cons "fa_list_cons") list (a ptr) (b list))
(defcfun (list-dcons "fa_list_dcons") list (a ptr) (b list))
(defcfun (list-repeat "fa_list_repeat") list (a :int) (b ptr))
(defcfun (list-enumerate "fa_list_enumerate") list (a :int) (b :int))
(defcfun (list-copy "fa_list_copy") list (a list))
(defcfun (list-destroy "fa_list_destroy") :void (a list))
(defcfun (list-is-empty "fa_list_is_empty") :boolean (a list))
(defcfun (list-is-single "fa_list_is_single") :boolean (a list))
(defcfun (list-length "fa_list_length") :int (a list))
(defcfun (list-head "fa_list_head") ptr (a list))
(defcfun (list-tail "fa_list_tail") list (a list))
(defcfun (list-dtail "fa_list_dtail") list (a list))
(defcfun (list-init "fa_list_init") list (a list))
(defcfun (list-dinit "fa_list_dinit") list (a list))
(defcfun (list-last "fa_list_last") ptr (a list))
(defcfun (list-append "fa_list_append") list (a list) (b list))
(defcfun (list-dappend "fa_list_dappend") list (a list) (b list))
(defcfun (list-reverse "fa_list_reverse") list (a list))
(defcfun (list-dreverse "fa_list_dreverse") list (a list))
(defcfun (list-sort "fa_list_sort") list (a list))
(defcfun (list-dsort "fa_list_dsort") list (a list))
(defcfun (list-take "fa_list_take") list (a :int) (b list))
(defcfun (list-dtake "fa_list_dtake") list (a :int) (b list))
(defcfun (list-drop "fa_list_drop") list (a :int) (b list))
(defcfun (list-ddrop "fa_list_ddrop") list (a :int) (b list))
(defcfun (list-index "fa_list_index") ptr (a :int) (b list))
(defcfun (list-range "fa_list_range") list (a :int) (b :int) (c list))
(defcfun (list-insert "fa_list_insert") list (a :int) (b ptr) (c list))
(defcfun (list-dinsert "fa_list_dinsert") list (a :int) (b ptr) (c list))
(defcfun (list-insert-range "fa_list_insert_range") list (a :int) (b list) (c list))
(defcfun (list-dinsert-range "fa_list_dinsert_range") list (a :int) (b list) (c list))
(defcfun (list-remove "fa_list_remove") list (a :int) (b list))
(defcfun (list-dremove "fa_list_dremove") list (a :int) (b list))
(defcfun (list-remove-range "fa_list_remove_range") list (a :int) (b :int) (c list))
(defcfun (list-dremove-range "fa_list_dremove_range") list (a :int) (b :int) (c list))
(defcfun (list-has "fa_list_has") :boolean (a ptr) (b list))
(defcfun (list-find "fa_list_find") ptr (a pred) (b ptr) (c list))
(defcfun (list-index-of "fa_list_index_of") :int (a ptr) (b list))
(defcfun (list-find-index "fa_list_find_index") :int (a pred) (b ptr) (c list))
(defcfun (list-filter "fa_list_filter") list (a pred) (b ptr) (c list))
(defcfun (list-dfilter "fa_list_dfilter") list (a pred) (b ptr) (c list))
(defcfun (list-map "fa_list_map") list (a unary) (b ptr) (c list))
(defcfun (list-dmap "fa_list_dmap") list (a unary) (b ptr) (c list))
(defcfun (list-join "fa_list_join") list (a list))
(defcfun (list-djoin "fa_list_djoin") list (a list))
(defcfun (list-fold-left "fa_list_fold_left") ptr (a binary) (b ptr) (c ptr) (d list))
(defcfun (list-dfold-left "fa_list_dfold_left") ptr (a binary) (b ptr) (c ptr) (d list))
(defcfun (list-to-list "fa_list_to_list") list (a list))

