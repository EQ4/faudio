(in-package :faudio)
(defctype midi-message-status :int)
(defctype midi-message-channel :int)
(defctype midi-message-data :int)
(define-foreign-type midi-message-type () () (:actual-type :pointer))
(define-parse-method midi-message () (make-instance 'midi-message-type))
(defclass midi-message () ((midi-message-ptr :initarg :midi-message-ptr)))
(defmethod translate-to-foreign (x (type midi-message-type)) (slot-value x 'midi-message-ptr))
(defmethod translate-from-foreign (x (type midi-message-type)) (make-instance 'midi-message :midi-message-ptr x))
(defcfun (midi-message-create-simple "fa_midi_message_create_simple") midi-message (a midi-message-status) (b :int) (c :int))
(defcfun (midi-message-create-sysex "fa_midi_message_create_sysex") midi-message (a buffer))
(defcfun (midi-message-copy "fa_midi_message_copy") midi-message (a midi-message))
(defcfun (midi-message-destroy "fa_midi_message_destroy") :void (a midi-message))
(defcfun (midi-message-is-simple "fa_midi_message_is_simple") :boolean (a midi-message))
(defcfun (midi-message-simple-data "fa_midi_message_simple_data") pair (a midi-message))
(defcfun (midi-message-status "fa_midi_message_status") midi-message-status (a midi-message))
(defcfun (midi-message-channel "fa_midi_message_channel") midi-message-channel (a midi-message))
(defcfun (midi-message-is-sysex "fa_midi_message_is_sysex") :boolean (a midi-message))
(defcfun (midi-message-sysex-data "fa_midi_message_sysex_data") buffer (a midi-message))

