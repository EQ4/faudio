(in-package :faudio)
(define-foreign-type action-type () () (:actual-type :pointer))
(define-parse-method action () (make-instance 'action-type))
(defclass action () ((action-ptr :initarg :action-ptr)))
(defmethod translate-to-foreign (x (type action-type)) (slot-value x 'action-ptr))
(defmethod translate-from-foreign (x (type action-type)) (make-instance 'action :action-ptr x))
(defctype action-channel :int)
(defctype action-name string)
(defctype action-value ptr)
(defcfun (action-set "fa_action_set") action (a action-channel) (b :double))
(defcfun (action-accum "fa_action_accum") action (a action-channel) (b signal-unary-double) (c ptr))
(defcfun (action-send "fa_action_send") action (a action-name) (b action-value))
(defcfun (action-is-set "fa_action_is_set") :boolean (a action))
(defcfun (action-set-channel "fa_action_set_channel") action-channel (a action))
(defcfun (action-set-value "fa_action_set_value") :double (a action))
(defcfun (action-is-accum "fa_action_is_accum") :boolean (a action))
(defcfun (action-accum-channel "fa_action_accum_channel") action-channel (a action))
(defcfun (action-accum-function "fa_action_accum_function") signal-unary-double (a action))
(defcfun (action-accum-data "fa_action_accum_data") ptr (a action))
(defcfun (action-is-send "fa_action_is_send") :boolean (a action))
(defcfun (action-send-name "fa_action_send_name") action-name (a action))
(defcfun (action-send-value "fa_action_send_value") action-value (a action))
(defcfun (action-copy "fa_action_copy") action (a action))
(defcfun (action-destroy "fa_action_destroy") :void (a action))

