(in-package :faudio)
(define-foreign-type pair-left-type () () (:actual-type :pointer))
(define-parse-method pair-left () (make-instance 'pair-left-type))
(defclass pair-left () ((pair-left-ptr :initarg :pair-left-ptr)))
(defmethod translate-to-foreign (x (type pair-left-type)) (slot-value x 'pair-left-ptr))
(defmethod translate-from-foreign (x (type pair-left-type)) (make-instance 'pair-left :pair-left-ptr x))
(defctype pair-left-struct (:pointer :void))
(defcfun (pair-left-create "fa_pair_left_create") pair-left (a ptr) (b ptr))
(defcfun (pair-left-read "fa_pair_left_read") pair-left (a (:pointer pair-left-struct)))
(defcfun (pair-left-write "fa_pair_left_write") :void (a (:pointer pair-left-struct)) (b pair-left))
(defcfun (pair-left-copy "fa_pair_left_copy") pair-left (a pair-left))
(defcfun (pair-left-destroy "fa_pair_left_destroy") :void (a pair-left))
(defcfun (pair-left-decons "fa_pair_left_decons") :void (a (:pointer ptr)) (b (:pointer ptr)) (c pair-left))
(defcfun (pair-left-to-pair "fa_pair_left_to_pair") pair (a pair-left))
(defcfun (pair-left-from-pair "fa_pair_left_from_pair") pair-left (a pair))
(defcfun (pair-left-to-list "fa_pair_left_to_list") list (a pair-left))

