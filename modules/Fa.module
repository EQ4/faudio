
/**
    Basic definitions. 
 */
module Fa
{
    import Fa.Std;

    import "C" Fa.Alloc;
    import "C" Fa.Interfaces;


    // Basic types

    /** Pointer type, equivalent to `void*`.
    */
    type Ptr = Void*;

    // Function types

    /** A nullary function, defined as `fa_ptr_t(*fa_nullary_t )(fa_ptr_t)`.

        The first argument is an environment pointer which is usually passed along with the function.
        This is the standard C technique for closing over variables.
    */
    type Nullary = (Ptr -> Ptr)*;

    /** A unary function.

        The first argument is an environment pointer which is usually passed along with the function.
        This is the standard C technique for closing over variables.
    */
    type Unary   = ((Ptr, Ptr) -> Ptr)*;

    /** A binary function.

        The first argument is an environment pointer which is usually passed along with the function.
        This is the standard C technique for closing over variables.
    */
    type Binary  = ((Ptr, Ptr, Ptr) -> Ptr)*;

    /** A ternary function.

        The first argument is an environment pointer which is usually passed along with the function.
        This is the standard C technique for closing over variables.
    */
    type Ternary  = ((Ptr, Ptr, Ptr, Ptr) -> Ptr)*;

    /** A predicate, or boolean function.

        The first argument is an environment pointer which is usually passed along with the function.
        This is the standard C technique for closing over variables.
    */
    type Pred   = ((Ptr, Ptr) -> Bool)*;


    // Character types

    /** An 8-bit character. */
    type Char8  = Char;
    /** A 16-bit character. */
    type Char16 = UInt16;
    /** A 32-bit character. */
    type Char32 = UInt32;


    // Type predicates and conversions
    // TODO move to dynamic (se #158)

    /**
        @see [Value references](@ref ValueReferences)
      */
    isBool     : Ptr -> Bool;
    isInt8     : Ptr -> Bool;
    isInt16    : Ptr -> Bool;
    isInt32    : Ptr -> Bool;
    isInt64    : Ptr -> Bool;
    isFloat    : Ptr -> Bool;
    isDouble   : Ptr -> Bool;
    isRef      : Ptr -> Bool;

    toBool     : Ptr -> Bool;
    toInt8     : Ptr -> Int8;
    toInt16    : Ptr -> Int16;
    toInt32    : Ptr -> Int32;
    toInt64    : Ptr -> Int64;
    toFloat    : Ptr -> Float;
    toDouble   : Ptr -> Double;

    peekBool   : Ptr -> Bool;
    peekInt8   : Ptr -> Int8;
    peekInt16  : Ptr -> Int16;
    peekInt32  : Ptr -> Int32;
    peekInt64  : Ptr -> Int64;
    peekFloat  : Ptr -> Float;
    peekDouble : Ptr -> Double;

    fromBool   : Bool -> Ptr;
    fromInt8   : Int8 -> Ptr;
    fromInt16  : Int16 -> Ptr;
    fromInt32  : Int32 -> Ptr;
    fromInt64  : Int64 -> Ptr;
    fromFloat  : Float -> Ptr;
    fromDouble : Double -> Ptr;


    // Interface dispatch

    /** Unique identifier. Only used for interface lookup at the moment.
    */
    type Id = Int64;

    /** Callback to lookup an interface implementation.
    */
    type Impl = (Id -> Ptr)*;

    /** Returns an implenentation of the given interface on the given value.
        @return Pointer to implementation (optional).
        @see [Interfaces](@ref Interfaces)
      */
    interface : (Id, Ptr) -> Ptr;


    // Interfaces

    /** Equality comparison interface.
    */
    type Equal   = struct {
        equal : ((Ptr, Ptr) -> Bool)*
    };

    /** Return whether the given values are equal.
        @see [Equal](@ref fa_equal_t)
      */
    equal            : (Ptr, Ptr) -> Bool;
    /** Return whether the given values are unequal.
        @see [Equal](@ref fa_equal_t)
      */
    notEqual         : (Ptr, Ptr) -> Bool;

    /** Less-than comparison interface.
    */
    type Order  = struct {
        lessThan    : ((Ptr, Ptr) -> Bool)*,
        greaterThan : ((Ptr, Ptr) -> Bool)*
    };

    lessThan         : (Ptr, Ptr) -> Bool;
    greaterThan      : (Ptr, Ptr) -> Bool;
    lessThanEqual    : (Ptr, Ptr) -> Bool;
    greaterThanEqual : (Ptr, Ptr) -> Bool;
    min              : (Ptr, Ptr) -> Ptr;
    max              : (Ptr, Ptr) -> Ptr;

    /** Arithmetic operations interface.
    */
    type Number = struct {
        add      : ((Ptr, Ptr) -> Ptr)*,
        subtract : ((Ptr, Ptr) -> Ptr)*,
        multiply : ((Ptr, Ptr) -> Ptr)*,
        divide   : ((Ptr, Ptr) -> Ptr)*,
        absolute : (Ptr -> Ptr)*
    };

    add         : (Ptr, Ptr) -> Ptr;
    subtract    : (Ptr, Ptr) -> Ptr;
    multiply    : (Ptr, Ptr) -> Ptr;
    divide      : (Ptr, Ptr) -> Ptr;
    absolute    : Ptr -> Ptr;
    dadd         : (Ptr, Ptr) -> Ptr;
    dsubtract    : (Ptr, Ptr) -> Ptr;
    dmultiply    : (Ptr, Ptr) -> Ptr;
    ddivide      : (Ptr, Ptr) -> Ptr;
    dabsolute    : Ptr -> Ptr;

    /** Generic copying interface.
    */
    type Copy   = struct {
        copy : (Ptr -> Ptr)*
    };

    /** Generic destruction interface.
    */
    type Destroy   = struct {
        destroy : (Ptr -> Void)*
    };

    /** Copy the given value.
        @see [Copy](@ref fa_copy_t)
      */
    copy    : Ptr -> Ptr;
    /** Move the given value. This is the identity function,
        just serves as a notification.
      */
    move    : Ptr -> Ptr;
    
    /** Destroy the given value.
        @param  Value to destroy (destroyed).
        @see [Destroy](@ref fa_destroy_t)
      */
    destroy : Ptr -> Void;
    // TODO deepDestroy : Ptr -> Void;

    /** Return whether the given value is an error or not.

        This function is often used with [log](@ref fa_error_log) as in:

        ~~~
        if (fa_check(value)) {
            fa_error_log(NULL, value);
            exit(-1);
        }
        ~~~

        @param value Value to check (can be any type).
        @return
          A boolean.
     */
    check   : Ptr -> Bool;

    /** Print the given value, using [Show](@ref fa_string_show_t).
        @param format   A printf-style format string.
        @param value    Value to print.
      */
    print    : (Char*,Ptr) -> Void;
    dprint   : (Char*,Ptr) -> Void;
    printLn  : (Ptr) -> Void;
    dprintLn : (Ptr) -> Void;
}

