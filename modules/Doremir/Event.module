
/** 
    @addtogroup DoremirEvent
    
    Functional scheduler events.

    @par Literals
    - `never()`
    - `now(v)`
    - `later(t,v)`
    - `delay(t,x)`
    - `merge(x,y)`
    - `switch_(p,x,y)`

    @par Display
    - `<Event @1000ms 3.1415>`
    

    @par Implements 
    - doremir_destroy_t
    - doremir_string_show_t
 */
module Doremir.Event
{
    import Doremir;
    import Doremir.Std;
    import Doremir.Time;
    import Doremir.Message;

    /** @typedef doremir_buffer_t
        The buffer. 
     */
    type Event = opaque;

    never   : () -> Event;
    now     : Ptr -> Event;
    delay   : (Time,Event) -> Event;
    merge   : (Event,Event) -> Event;               // rename merge
    switch  : (Event,Event,Event) -> Event;
    destroy : Event -> Void;
    
    // later  : (Time,Ptr) -> Event;
    // upon   : (Event,Event) -> Event;
    after  : Event -> Event;
    before : Event -> Event;
    // sample : Event -> Event;
    toggle : Event -> Event;
    // select : (Event,Event) -> Event;

    receive : (Ptr,Address) -> Event;       // Sender
    send : (Ptr,Address,Event) -> Event;    // Receiver


    hasValue : (Event,Time) -> Bool;   // Is an occurance available            rename hasValue
    value  : Event -> Ptr;           // Get the first occurance value        rename value?
    offset : Event -> Time;          // Offset to first occurance            rename offset
    head    : Event -> Event;
    tail    : Event -> Event;

    filter      : (Pred, Ptr, Event) -> Event;
    dfilter     : (Pred, Ptr, Event) -> Event;
    map         : (Unary, Ptr, Event) -> Event;
    dmap        : (Unary, Ptr, Event) -> Event;
    joinMap   : (Unary, Ptr, Event) -> Event;
    djoinMap  : (Unary, Ptr, Event) -> Event;
    join      : Event -> Event;
    djoin     : Event -> Event;
    
    // map
    // joinMap, join
    // 
}