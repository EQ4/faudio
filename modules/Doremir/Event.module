
/** 
    @addtogroup DoremirEvent

    @par Literals
    - `never()`
    - `now(v)`
    - `later(t,v)`
    - `delay(t,x)`
    - `merge(x,y)`
    - `switch(p,x,y)`

    @par Display
    - `<Now>`
    

    @par Implements 
    - doremir_destroy_t
    - doremir_string_show_t
 */
module Doremir.Event
{
    import Doremir;
    import Doremir.Std;
    import Doremir.Time;

    /** @typedef doremir_buffer_t
        The buffer. 
     */
    type Event = opaque;

    // Prim
    never   : () -> Event;
    now     : Ptr -> Event;
    delay   : (Time,Event) -> Event;

    // head   : Event -> Event;
    tail   : Event -> Event;
    merge   : (Event,Event) -> Event;               // rename merge
    switch  : (Event,Event,Event) -> Event;
    destroy : Event -> Void;

    // Non-pure
    // TODO unify with Sender/Receiver paradigm
    external : () -> Event;
    send : (Ptr,Event) -> Void; // Sets value
    
    // The canonical form reads from a queue
    
    
    // Backend methods
    delta : Event -> Time;          // Offset to first occurance            rename minOffset
    live  : (Event,Time) -> Bool;   // Is an occurance available            rename hasValue
    head  : Event -> Ptr;           // Get the first occurance value        rename value?
    


    
    // map
    // concatMap, join
    // 
}