
/** 
    @addtogroup DoremirMap
    
    Immutable ordered map data structure.

    @par Requires 
        doremir_order_t
    @par Implements 
        doremir_equal_t
        doremir_order_t
        doremir_dynamic_t
        doremir_destroy_t
    @see 
        \ref Collections
    
 */
module Doremir.Map 
{
    import Doremir;
    import Doremir.Std;
    import Doremir.Pair;
    
    type Map = opaque;
    type Key = Ptr;
    
    empty   : () -> Map;
    single  : (Key, Ptr) -> Map;
    append  : (Map, Map) -> Map;
    destroy : Map -> Void;
    copy    : Map -> Map;
    swap    : (Map, Map) -> Void;
    fromPair : Pair -> Map;

    key            : (Map, Key) -> Bool;
    elem           : (Map, Ptr) -> Bool;
    entry          : (Map, Pair) -> Bool;
    submapOf       : (Map, Map) -> Bool;
    properSubmapOf : (Map, Map) -> Bool;

    // TODO what about equality?    
                                
    add           : (Map, Key, Ptr) -> Map;
    remove        : (Map, Key, Ptr) -> Void;
    addDest       : (Map, Key, Ptr) -> Map;
    removeDest    : (Map, Key, Ptr) -> Void;
}