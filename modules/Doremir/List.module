
/**
    @addtogroup DoremirList

    Immutable list data structure.

    - Fast front access: ([empty](@ref doremir_list_empty), 
                          [single](@ref doremir_list_single), 
                          [cons](@ref doremir_list_cons), 
                          [head](@ref doremir_list_head), 
                          [tail](@ref doremir_list_tail)).

    - Slow back access ([init](@ref doremir_list_init), 
                        [last](@ref doremir_list_last)).

    - Slow random access ([index](@ref doremir_list_index), 
                          [insert](@ref doremir_list_insert), 
                          [remove](@ref doremir_list_remove)).

    - Slow range access: ([take](@ref doremir_list_take), 
                          [drop](@ref doremir_list_drop), 
                          [range](@ref doremir_list_range), 
                          [insertRange](@ref doremir_list_insert_range), 
                          [removeRange](@ref doremir_list_remove_range))

    - Linear [find](@ref doremir_list_find), 
             [map](@ref doremir_list_map), 
             [fold](@ref doremir_list_fold), 
             [reverse](@ref doremir_list_reverse) and 
             [filter](@ref doremir_list_filter).

    - Logarithmic [sort](@ref doremir_list_sort).

    @par Literals
    - `list(1, 2, 3)`

    @par Display
    - `[1,2,3]`
    
    @par Iteration
    ~~~
    doremir_list_for_each (list(1,2,3), x)
    {
        doremir_print("%s\n", x);
    }
    ~~~

    @par Implements
    - doremir_equal_t
    - doremir_order_t
    - doremir_copy_t
    - doremir_destroy_t
    - doremir_dynamic_t
    - doremir_string_show_t

    @see
    - [Data structures](@ref DataStructures)

 */
module Doremir.List
{
    import Doremir;

    type List   = opaque;

    // Constructors
    empty       : () -> List;
    single      : Ptr -> List;
    cons        : (Ptr, List) -> List;
    dcons       : (Ptr, List) -> List;
    repeat      : (Int, Ptr) -> List;
    enumerate   : (Int, Int) -> List;
    copy        : List -> List;
    destroy     : List -> Void;

    // Predicates
    isEmpty     : List -> Bool;
    isSingle    : List -> Bool;
    length      : List -> Int;

    // Sequential access
    head        : List -> Ptr;
    tail        : List -> List;
    dtail       : List -> List;
    init        : List -> List;
    dinit       : List -> List;
    last        : List -> Ptr;

    // Misc operations
    append      : (List, List) -> List;
    dappend     : (List, List) -> List;
    reverse     : List -> List;
    dreverse    : List -> List;
    sort        : List -> List;
    dsort       : List -> List;

    // Random access
    take         : (Int, List) -> List;
    dtake        : (Int, List) -> List;
    drop         : (Int, List) -> List;
    ddrop        : (Int, List) -> List;
    index        : (Int, List) -> Ptr;
    range        : (Int, Int, List) -> List;
    insert       : (Int, Ptr, List) -> List;
    dinsert      : (Int, Ptr, List) -> List;
    insertRange  : (Int, List, List) -> List;
    dinsertRange : (Int, List, List) -> List;
    remove       : (Int, List) -> List;
    dremove      : (Int, List) -> List;
    removeRange  : (Int, Int, List) -> List;
    dremoveRange : (Int, Int, List) -> List;

    // Searching
    has         : (Ptr, List) -> Bool;
    find        : (Pred, Ptr, List) -> Ptr;
    indexOf     : (Ptr, List) -> Int;
    findIndex   : (Pred, Ptr, List) -> Int;

    // Maps and folds
    filter      : (Pred, Ptr, List) -> List;
    dfilter     : (Pred, Ptr, List) -> List;
    map         : (Unary, Ptr, List) -> List;
    dmap        : (Unary, Ptr, List) -> List;
    joinMap     : (Unary, Ptr, List) -> List;
    djoinMap    : (Unary, Ptr, List) -> List;
    join        : List -> List;
    djoin       : List -> List;

    foldLeft    : (Binary, Ptr, Ptr, List) -> Ptr;
    dfoldLeft   : (Binary, Ptr, Ptr, List) -> Ptr;

    // Conversions
    toList      : List -> List;
}

