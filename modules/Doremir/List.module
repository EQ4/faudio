
/** 
    @addtogroup DoremirList
    
    Immutable list data structure.

    @par Implements 
        doremir_equal_t
        doremir_order_t
        doremir_copy_t
        doremir_destroy_t
        doremir_dynamic_t
        doremir_string_show_t
    @see 
        \ref Collections
    
 */
module Doremir.List
{
    import Doremir;
    import Doremir.Std;

    type List   = opaque;
            
    empty       : () -> List;
    single      : Ptr -> List;
    cons        : (Ptr, List) -> List;
    // snoc        : (Ptr, List) -> List;
    append      : (List, List) -> List;
    // dcons       : (Ptr, List) -> List;
    // dsnoc       : (Ptr, List) -> List;
    // dappend     : (List, List) -> List;
    copy        : List -> List;
    destroy     : List -> Void;

    isEmpty     : List -> Bool;
    isSingle    : List -> Bool;
    length      : List -> Int;
    head        : List -> Ptr;
    tail        : List -> List;
    // init        : List -> List;
    // last        : List -> Ptr;
    // take        : (Int, List) -> List;
    // drop        : (Int, List) -> List;
    

    find        : (Pred, List) -> Ptr;
    filter      : (Pred, List) -> List;
    reverse     : List -> List;
    sort        : List -> List;

    map         : (Unary, List) -> List;
    foldLeft    : (Binary, Ptr, List) -> Ptr;
    
    // sum         : List -> Ptr;
    // product     : List -> Ptr;
    // maximum     : List -> Ptr;
    // minimum     : List -> Ptr;                                
    concat      : List -> List;
}