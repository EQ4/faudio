
/** 
    @addtogroup DoremirList
    
    Immutable list data structure.

    @par Implements 
        doremir_equal_t
        doremir_order_t
        doremir_copy_t
        doremir_destroy_t
        doremir_dynamic_t
        doremir_string_show_t
    @see 
        \ref Collections
    
 */
module Doremir.List
{
    import Doremir;
    import Doremir.Std;

    /** @class doremir_list_t
        @implements
            doremir_eq_t, doremir_ord_t, doremir_copy_t, doremir_destroy_t, doremir_dynamic_t
        */
    type List   = opaque;
    type OrdList = List;
    type ListList = List;
    // type MaybePtr = Ptr;
    // type MaybeList = Ptr;
    // FIXME what about partiality?
            
    empty       : () -> List;
    single      : Ptr -> List;
    cons        : (Ptr, List) -> List;
    snoc        : (Ptr, List) -> List;
    append      : (List, List) -> List;
    copy        : List -> List;
    destroy     : List -> Void;

    isEmpty     : List -> Bool;
    length      : List -> Int;
    head        : List -> Ptr;
    tail        : List -> Ptr;
    init        : List -> Ptr;
    last        : List -> Ptr;

    take        : (Int, List) -> List;
    drop        : (Int, List) -> List;
    isElem      : (Ptr, List) -> Bool;
    
    reverse     : List -> List;
    sort        : OrdList -> List;

    find        : (Pred, List) -> Ptr;
    filter      : (Pred, List) -> List;
    any         : (Pred, List) -> Bool;
    all         : (Pred, List) -> Bool;

    map         : (Unary, List)       -> List;
    fold        : (Binary, Ptr, List) -> Ptr;
    concat      : ListList -> List;
    
    sum         : List -> Ptr;
    product     : List -> Ptr;
    maximum     : List -> Ptr;
    minimum     : List -> Ptr;
                                
    consd    : (Ptr, List) -> List;
    snocd    : (Ptr, List) -> List;    
    reversed : List -> List;
    sortd    : List -> List;
    mapd     : (Unary, List) -> List;
    foldd    : (Binary, Ptr, List) -> List;   
}