
/** 
    @addtogroup DoremirList
    
    Immutable list data structure.

    \warning To store a primitive (non-pointer) value in a collection, the \ref WrapperFunctions must be used.

 */
module Doremir.List
{
    import Doremir;
    import Doremir.Std;

    type List   = opaque;
    // type MaybePtr = Ptr;
    // type MaybeList = Ptr;
            
    empty       : () -> List;
    cons        : (Ptr, List) -> List;
    snoc        : (Ptr, List) -> List;
    destroy     : List -> Void;
    copy        : List -> List;
    swap        : (List, List) -> Void;

    isEmpty     : List -> Bool;
    lenght      : List -> Int;
    head        : List -> Ptr; // FIXME what about partiality?
    tail        : List -> Ptr;
    init        : List -> Ptr;
    last        : List -> Ptr;

    take        : (Int, List) -> List;
    drop        : (Int, List) -> List;
    isElem      : (Ptr, List) -> Bool;
    
    reverse     : List -> List;
    sort        : List -> List;
    // concat      : List -> List;
    // concatSep   : List -> List;

    // find        : (Pred, List) -> MaybePtr;
    filter      : (Pred, List) -> List;
    // any         : (Pred, List) -> Bool;
    // all         : (Pred, List) -> Bool;

    map         : (List, Unary)         -> List;
    foldl       : (List, Binary, Ptr) -> List;
    

    // sum         : (Num, List) -> Ptr;
    // product     : (Num, List) -> Ptr;
    // maximum     : List -> Ptr;
    // minimum     : List -> Ptr;
                                
    consd    : (Ptr, List) -> List;
    snocd    : (Ptr, List) -> List;    
    reversed : List -> List;
    sortd    : List -> List;
    mapd     : (List, Unary) -> List;
    
}