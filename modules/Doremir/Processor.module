
/**
    @addtogroup DoremirProcessor
    
    Provides signal processors.
    
 */
module Doremir.Processor
{
    import Doremir;
    import Doremir.Time;
    import Doremir.Type;
    import Doremir.Buffer;

    /** @struct doremir_processor_info_t 
        Information available to a processor at processing time. 
      */
    type Info = struct {
        sampleRate  : Double,
        sampleCount : Size,
        vectorSize  : Size,
        realTime    : Time
    };     
    
    infoDefault : Info* -> Void;  

    /** @typedef doremir_processor_samples_t
        The samples manipulated by a processor.
     */
    type Samples = Buffer;

    /** @interface doremir_processor_t 
        The abstract processing interface. */
    type Processor = struct {
        before  : ((Ptr, Info*) -> Void)*,
        process : ((Ptr, Info*, Samples) -> Samples)*,
        after   : ((Ptr, Info*) -> Void)*
    };

    /** @typedef doremir_processor_any_t 
        A processor of unkown type.
     */
    type Any = Ptr;   
    
    unary   : (Type, Unary*) -> Any;
    binary : (Type, Binary*) -> Any;
    ternary : (Type, Ternary*) -> Any;
    
    identity : Type -> Any;
    constant : (Type, Ptr) -> Any;
    delay    : (Type, Size) -> Any;
    split    : Type -> Any;

    sequence : (Any, Any) -> Any;
    parallel : (Any, Any) -> Any;    
    loop     : Any -> Any;
    
    cos         : Type -> Any;
    sin         : Type -> Any;
    tan         : Type -> Any;
    acos        : Type -> Any;
    asin        : Type -> Any;
    atan        : Type -> Any;

    add         : Type -> Any;
    subtract    : Type -> Any;
    multiply    : Type -> Any;
    divide      : Type -> Any;
    modulo      : Type -> Any;
    absolute    : Type -> Any;

    and         : Type -> Any;
    or          : Type -> Any;
    not         : Type -> Any;
    bitAnd      : Type -> Any;
    bitOr       : Type -> Any;
    bitNot      : Type -> Any;
    bitXor      : Type -> Any;
    
}