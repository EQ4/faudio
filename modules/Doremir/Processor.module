
/**
    @addtogroup DoremirProcessor

    Provides signal processors.

    @par Literals
    - `par(p,q)`
    - `seq(p,q)`
    - `fst(p)`
    - `snd(p)`
    - `loop(p)`
    - `delay(n,T)`
    - `id(T)`
    - `const(T,v)`
    - `split(T)`

    @par Implements
    - doremir_processor_interface_t
    - doremir_string_show_t
    - doremir_destroy_t
 */
module Doremir.Processor
{
    import Doremir;
    import Doremir.Time;
    import Doremir.Type;
    import Doremir.Buffer;
    import Doremir.Message;

    /** @struct doremir_processor_info_t
        Information available to a processor at processing time.
      */
    type Info = struct {
        sampleRate  : Double,
        frameSize   : Size,
        sampleTime  : Size,
        totalTime   : Time,
        dispatcher  : Dispatcher
    };

    // infoDefault : Info* -> Void;

    /** @typedef doremir_processor_samples_t
        The samples manipulated by a processor.
     */
    type Samples = Ptr;

    /** @interface doremir_processor_interface_t
        Processing interface. */
    type Interface = struct {
        before  : ((Ptr, Info*) -> Void)*,
        process : ((Ptr, Info*, Samples) -> Void)*,
        after   : ((Ptr, Info*) -> Void)*,
        
        inputType   : (Ptr -> Type)*,
        outputType  : (Ptr -> Type)*,
        bufferSize  : (Ptr -> Size)*
    };
    
    /** @typedef doremir_processor_t
        A processor of unknown type.
     */
    type Processor = opaque;

    inputType : Processor -> Type;
    outputType : Processor -> Type;


    // ------------------------------------------------------------------------
    // Delay primitives

    identity    : Type -> Processor;                            // a ~> a
    constant    : (Type, Type, Ptr) -> Processor;               // a ~> b
    split       : Type -> Processor;                            // a ~> (a,a)
    par         : (Processor, Processor) -> Processor;          // (a~>b), (c~>d) -> (a,c~>b,d)
    seq         : (Processor, Processor) -> Processor;          // (a~>b), (b~>c) -> (a~>c)
    compose     : (Processor, Processor) -> Processor;          // (a~>b), (b~>c) -> (a~>c)
    loop        : Processor -> Processor;                       // (a,c~>b,d)     -> (a ~> b)
    
    unary       : (Type, Type, Unary, Ptr) -> Processor;        // a ~> b       {a}       ~> {b}
    binary      : (Type, Type, Type, Binary, Ptr) -> Processor; // (a,b) ~> c   ({a},{b}) ~> c

    // ------------------------------------------------------------------------
    // Delay primitives

    delay       : (Type, Size) -> Processor;                    // a ~> a
    // init
    // vdelay
    // videlay


    // ------------------------------------------------------------------------
    // Vector ops

    // foldVec     : Processor -> Processor;                     // ((a,a) ~> b) -> [a x n] ~> b
    // unfoldVec   : Processor -> Processor;                     // (a ~> (b,b)) -> a       ~> [b x n]

    // ------------------------------------------------------------------------
    // Math primitives

    add                 : Type -> Processor;
    subtract            : Type -> Processor;
    multiply            : Type -> Processor;
    power               : Type -> Processor;
    divide              : Type -> Processor;
    modulo              : Type -> Processor;
    absolute            : Type -> Processor;

    not                 : Type -> Processor;
    and                 : Type -> Processor;
    or                  : Type -> Processor;
    xor                 : Type -> Processor;
    bitNot              : Type -> Processor;
    bitAnd              : Type -> Processor;
    bitOr               : Type -> Processor;
    bitXor              : Type -> Processor;
    shiftLeft           : Type -> Processor;
    shiftRight          : Type -> Processor;

    equal               : Type -> Processor;
    lessThan            : Type -> Processor;
    greaterThan         : Type -> Processor;
    lessThanEqual       : Type -> Processor;
    greaterThanEqual    : Type -> Processor;

    acos                : Type -> Processor;
    asin                : Type -> Processor;
    atan                : Type -> Processor;
    cos                 : Type -> Processor;
    sin                 : Type -> Processor;
    tan                 : Type -> Processor;
    exp                 : Type -> Processor;
    log                 : Type -> Processor;
    log10               : Type -> Processor;
    pow                 : Type -> Processor;
    sqrt                : Type -> Processor;
    abs                 : Type -> Processor;
    min                 : Type -> Processor;
    max                 : Type -> Processor;
    fmod                : Type -> Processor;
    remainder           : Type -> Processor;
    floor               : Type -> Processor;
    ceil                : Type -> Processor;
    rint                : Type -> Processor;

    // left        : Type -> Processor;                          // (a,a) ~> a
    // right       : Type -> Processor;                          // (a,b) ~> b
    // swap        : Type -> Processor;                          // (a,b)     ~> (b,a)
    // assoc       : Type -> Processor;                          // (a,(b,c)) ~> ((a,b),c)
    // unassoc     : Type -> Processor;                          // ((a,b),c) ~> (a,(b,c))
    // first       : Processor -> Processor;                     // (a~>b)         -> (a,c ~> b,c)
    // second      : Processor -> Processor;                     // (a~>b)         -> (c,a ~> c,b)

}