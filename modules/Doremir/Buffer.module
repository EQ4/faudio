
/** 
    @addtogroup DoremirBuffer
    
    Low-level buffer data structure. Each buffer is a mutable sequence of bytes with single-ownership
    semantics. The length of a buffer can never change, but its memory can be reused using the destructive
    resize operation.
    
    Note that buffers are not collections as their contents are mutable.


    @par Literals
    - `buffer(size)` 

    @par Implements 
    - doremir_copy_t
    - doremir_destroy_t
    - doremir_string_show_t
 */
module Doremir.Buffer
{
    import Doremir;
    import Doremir.Std;
    import Doremir.Pair;
    import Doremir.String;
    import Doremir.Type;

    /** @typedef doremir_buffer_t
        The buffer. 
     */
    type Buffer = opaque;

    create  : (Size) -> Buffer;
    copy    : Buffer -> Buffer;
    resize  : (Size, Buffer) -> Buffer;
    destroy : Buffer -> Void;

    size    : Buffer -> Size;  
    peek    : (Buffer, Size) -> UInt8;
    poke    : (Buffer, Size, UInt8) -> Void;

    peekInt16  : (Buffer, Size) -> Int16;
    peekInt32  : (Buffer, Size) -> Int32;
    peekInt64  : (Buffer, Size) -> Int64;
    peekFloat  : (Buffer, Size) -> Float;
    peekDouble : (Buffer, Size) -> Double;

    pokeInt16  : (Buffer, Size, Int16) -> Void;
    pokeInt32  : (Buffer, Size, Int32) -> Void;
    pokeInt64  : (Buffer, Size, Int64) -> Void;    
    pokeFloat  : (Buffer, Size, Float) -> Void;
    pokeDouble : (Buffer, Size, Double) -> Void;    

    readRaw : FilePath -> Buffer;
    writeRaw : (FilePath,Buffer) -> Void;
    
    readAudio : FilePath -> Pair; // (Type,Buffer)
    writeAudio : (FilePath,Type,Buffer) -> Void;

    unsafeAddress : Buffer -> Void*;
        
    // TODO views
    // TODO simd, vector ops
}