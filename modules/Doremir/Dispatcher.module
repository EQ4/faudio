
/**
    @addtogroup DoremirDispatcher
    
    Provides message dispatching.
    
    Dispatching is the action of delivering a *message* to an *address*, where
    the message is a dynamic collection and adderss is a pointer-sized value.
    
 */
module Doremir.Dispatcher
{
    import Doremir;
    import Doremir.Std;
    import Doremir.Pair;

    type Address = Ptr;
    type Message = Ptr;
    type Disp     = Ptr;
    type Recv     = Ptr;

    /** @interface doremir_dispatcher_receiver_t */
    type Receiver = struct {
        receive : ((Ptr, Address, Message) -> Void)*
    };

    /** @interface doremir_dispatcher_t */
    type Dispatcher = struct {
        addReceiver : ((Ptr, Ptr) -> Void)*,
        removeReceiver : ((Ptr, Ptr) -> Void)*,
        dispatch : (Ptr -> Void)*
    };
    
    // // synchronizing on any receiver
    // or   : (Recv, Recv) -> Recv;
    // // synchronizing on both receivers
    // and  : (Recv, Recv) -> Recv;
    // // synchronizing on both receivers (blocking the second)
    // first  : (Recv, Recv) -> Recv;
    // // synchronizing on the first receiver (sampling the second)
    // sample : (Recv, Recv) -> Recv;
    // // dispatcher that forwards messages matching a predicate over addr
    // filter : (Pred, Recv) -> Recv;
    // // dispatcher that forwards messages matching a predicate over (addr,msg)
    // filterPair : (Pred, Recv) -> Recv;

    // dispatcher that forwards all received messages on the same thread
    simple : () -> Ptr;
    // blocking, buffered dispatcher
    buffered : () -> Pair;
    // non-blocking, buffered dispatcher
    nonBlocking : () -> Pair;
    
}