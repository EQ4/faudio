
/**
    @addtogroup DoremirSignal
    
    Provides signals.
    
 */
module Doremir.Signal
{
    import Doremir;    
    import Doremir.Pair;
    import Doremir.Type;
    import Doremir.Event;
    import Doremir.Processor;
    
    type Signal = opaque;

    typeOf : Signal -> Type;

    applyUnary  : (Processor, Signal) -> Signal;
    applyBinary : (Processor, Signal, Signal) -> Signal;
    applyTernary : (Processor, Signal, Signal, Signal) -> Signal;

    constant  : Ptr -> Signal;
    value     : Event -> Signal;
    delay     : (Size, Signal) -> Signal;

    add                 : (Signal,Signal) -> Signal;
    subtract            : (Signal,Signal) -> Signal;
    multiply            : (Signal,Signal) -> Signal;
    power               : (Signal,Signal) -> Signal;
    divide              : (Signal,Signal) -> Signal;
    modulo              : (Signal,Signal) -> Signal;
    absolute            : Signal -> Signal;

    not                 : Signal -> Signal;
    and                 : (Signal,Signal) -> Signal;
    or                  : (Signal,Signal) -> Signal;
    xor                 : (Signal,Signal) -> Signal;
    bitNot              : (Signal,Signal) -> Signal;
    bitAnd              : (Signal,Signal) -> Signal;
    bitOr               : (Signal,Signal) -> Signal;
    bitXor              : (Signal,Signal) -> Signal;
    shiftLeft           : (Signal,Signal) -> Signal;
    shiftRight          : (Signal,Signal) -> Signal;

    equal               : (Signal,Signal) -> Signal;
    lessThan            : (Signal,Signal) -> Signal;
    greaterThan         : (Signal,Signal) -> Signal;
    lessThanEqual       : (Signal,Signal) -> Signal;
    greaterThanEqual    : (Signal,Signal) -> Signal;

    acos                : Signal -> Signal;
    asin                : Signal -> Signal;
    atan                : Signal -> Signal;
    cos                 : Signal -> Signal;
    sin                 : Signal -> Signal;
    tan                 : Signal -> Signal;
    exp                 : Signal -> Signal;
    log                 : Signal -> Signal;
    log10               : Signal -> Signal;
    pow                 : Signal -> Signal;
    sqrt                : Signal -> Signal;
    abs                 : Signal -> Signal;
    min                 : Signal -> Signal;
    max                 : Signal -> Signal;
    fmod                : Signal -> Signal;
    remainder           : Signal -> Signal;
    floor               : Signal -> Signal;
    ceil                : Signal -> Signal;
    rint                : Signal -> Signal;
}