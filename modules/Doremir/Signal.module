
/**
    @addtogroup DoremirSignal
    
    Provides signals.
    
 */
module Doremir.Signal
{
    import Doremir;    
    import Doremir.Pair;
    import Doremir.Type;
    import Doremir.Processor;
    
    type Signal = opaque;

    typeOf : Signal -> Type;

    applyUnary  : (Any, Signal) -> Signal;
    applyBinary : (Any, Signal, Signal) -> Signal;
    applyTernary : (Any, Signal, Signal, Signal) -> Signal;

    const  : (Ptr, Signal) -> Signal;
    delay  : (Size, Signal) -> Signal;
    split  : Signal -> Pair; // a -> (a,a)

    cos         : Signal -> Signal;
    sin         : Signal -> Signal;
    tan         : Signal -> Signal;
    acos        : Signal -> Signal;
    asin        : Signal -> Signal;
    atan        : Signal -> Signal;
    add         : Signal -> Signal;
    subtract    : (Signal, Signal) -> Signal;
    multiply    : (Signal, Signal) -> Signal;
    divide      : (Signal, Signal) -> Signal;
    modulo      : (Signal, Signal) -> Signal;
    absolute    : (Signal, Signal) -> Signal;
    and         : (Signal, Signal) -> Signal;
    or          : (Signal, Signal) -> Signal;
    not         : (Signal, Signal) -> Signal;
    bitAnd      : (Signal, Signal) -> Signal;
    bitOr       : (Signal, Signal) -> Signal;
    bitNot      : (Signal, Signal) -> Signal;
    bitXor      : (Signal, Signal) -> Signal;
}