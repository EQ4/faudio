
/** 
    @addtogroup DoremirString
    
    Immutable string type.

    @par Literals
    - `string("foo")`

    @par Implements 
    - doremir_equal_t
    - doremir_order_t
    - doremir_copy_t
    - doremir_destroy_t
    - doremir_dynamic_t
    - doremir_string_show_t
    
    @see
    - [Data structures](@ref DataStructures)
    
 */
module Doremir.String
{
    import Doremir;
    
    /**
        @typedef doremir_string_utf8_t
        A UTF-8 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.

        @typedef doremir_string_utf16_t
        A UTF-16 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.

        @typedef doremir_string_utf32_t
        A UTF-32 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.
     */
    type Utf8  = Char8*;
    type Utf16 = Char16*;
    type Utf32 = Char32*;

    /**
        @typedef doremir_string_t
        An immutable Unicode string.

        @typedef doremir_string_file_path_t
        A file path.
     */
    type String = opaque;
    type FilePath = String;

    /** @interface doremir_string_show_t 
        String conversion interface.
    */
    type Show  = struct {
        show : (Ptr -> String)*
    };

    /** @interface doremir_string_to_json_t 
        JSON conversion interface.
    */
    type ToJson  = struct {
        toJson : (Ptr -> String)*
    };
    /** @interface doremir_string_from_json_t 
        JSON conversion interface.
    */
    type FromJson  = struct {
        fromJson : (String -> Ptr)*
    };

    show   : Ptr -> String;
    
    // Constructors
    empty   : () -> String;
    single  : Char16 -> String;
    copy    : String -> String;
    append  : (String, String) -> String;
    dappend : (String, String) -> String;
    destroy : String -> Void;
    
    // Predicate and lookup
    length : String -> Int;
    charAt : (Int,String) -> Char16;

    // Conversion
    toUtf8     : String -> Utf8;
    toUtf16    : String -> Utf16;
    toUtf32    : String -> Utf32;
    toCfString : String -> Void*;
    fromUtf8     : Utf8 -> String;
    fromUtf16    : Utf16 -> String;
    fromUtf32    : Utf32 -> String;
    fromCfString : Void* -> String;

    // Formatting
    formatInteger : (Char*, Long) -> String;
    formatFloating : (Char*, Double) -> String;
}