
/**
    @addtogroup DoremirType
    
    Provides audio types.

    Type            | Description
    ----------------| ----------------------------
    `i8`            | 8-bit integer
    `i16`           | 16-bit integer
    `i32`           | 32-bit integer
    `i64`           | 64-bit integer
    `f32`           | 32-bit floating point
    `f64`           | 64-bit floating point
    `ptr`           | Pointer supporting copy and destroy
    `(A, B)`        | pair of *A* and *B*
    `[A x N]`       | vector of *A*
    `{A}`           | frame of *A*

    @par Literals
    - `type(i8)`
    - `type(i16)`
    - `type(i32)`
    - `type(i64)`
    - `type(f32)`
    - `type(f64)`
    - `type(ptr)`
    - `type_pair(type(f64), type(f64))`
    - `type_vector(type(f64), 200)`
    - `type_frame(type(f64))`

    @par Implements        
    - doremir_equal_t
    - doremir_copy_t
    - doremir_string_show_t
    - doremir_destroy_t
    
 */                                             
 
/*  
    TODO
    
    
 */
module Doremir.Type
{
    import Doremir;
    import Doremir.Pair;

    type Frames = Size;
    type Simple = enum { 
        I8Type, 
        I16Type, 
        I32Type, 
        I64Type,
        F32Type,
        F64Type,
        PtrType 
    };

    type Type = opaque;
    
    simple : Simple -> Type;    
    pair : (Type, Type) -> Type;
    vector : (Type, Size) -> Type;
    frame : Type -> Type;
    copy : Type -> Type;
    destroy : Type -> Void;

    isSimple : Type -> Bool;
    isPair : Type -> Bool;
    isVector : Type -> Bool;
    isFrame : Type -> Bool;

    getSimple       : Type -> Simple;
    getPairFst      : Type -> Type;
    getPairSnd      : Type -> Type;
    getVectorBase   : Type -> Type;
    getVectorSize   : Type -> Size;
    getFrameBase    : Type -> Type;
 
    sizeOf   : (Frames, Type) -> Size;
    offsetOf : (Frames, Type) -> Size;
    alignOf  : Type -> Size;
}