
/** 
    Mutable lock-free queues.

    @par Literals
    - `atomic_queue()` 

    @par Implements 
    - fa_destroy_t
    - fa_string_show_t

    @see 
    - [Data structures](@ref DataStructures)

 */
module Fa.Atomic.Queue
{
    import Fa;
    
    type Queue = opaque;
    
    /** Create a new queue.
        @par Atomicity
            Non-atomic
     */
    create : () -> Queue;
    /** Destroy the given queue.
        @par Atomicity
            Non-atomic
     */
    destroy : Queue -> Void;
    
    /** Read a value from the given queue.
        @return
            A value (optional).
        @par Atomicity
            Atomic
     */
    read : Queue -> Ptr;
    /** Write the given value to the given queue.
        @param queuer   Queue.
        @param value    Value to write (optional).
        @par Atomicity
            Atomic
     */
    write : (Queue, Ptr) -> Bool;
    
    peek : Queue -> Ptr;
}

