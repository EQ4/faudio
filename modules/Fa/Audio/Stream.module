
/**
    Provides real-time audio.
    
    These device run processors on the input and output
    the underlying system, typically physical audio interfaces. A running audio
    computation is represented by a *stream*. Access to the current device setups
    is provided by *sessions*.

    @par Implements
    - fa_equal_t
    - fa_destroy_t (sessions and streams)
    - fa_string_show_t

    @see
    - @ref Devices
 */
module "transient" Fa.Audio.Stream
{
    import Fa.Action;
    import Fa.Time;
    import Fa.Clock;
    
    /** An audio stream.
     */
    type Stream  = opaque;

    /** A callback to be invoked whenever a message is received.
     */
    type MessageCallback = Unary;


    /** Return the devices associated with the given stream.
        @param stream   The stream.
        @return A list of @ref fa_audio_device_t
     */
    devices : Stream -> List;

    /** Return the clock associated with a given stream.
        @param stream The stream.
        @return A clock.
     */
    getClock : Stream -> Clock;
    
    /** Return the clock associated with a given stream.
        @param stream The stream.
        @return A clock.
        @deprecated Use @ref fa_audio_get_clock.
     */
    streamClock : Stream -> Clock;

    /** Register a callback to be invoked when a message is received.

        Multiple callbacks can be registered this way. All registered callbacks
        are associated with a stream and will be removed when the stream is stopped
        or its associated session ends.

        @param callback
            Callback to register.
        @param callback_data
            Data closed over by the callback function.
        @param session
            Stream on which to register the callback.
        @warning
            Experimental.
     */
    addMessageCallback : (callback : MessageCallback, callbackData : Ptr, session : Stream) -> Void;

    /**
        Schedule an action on the stream.
        
        The action will be run as soon as the time of the stream (as
        reported by its clock) is greater than or equal to the given due time.
     */
    schedule : (time : Time, action : Action, stream : Stream) -> Void;

    /**
        Schedule an action on the stream.

        The action will be run when the given time has passed, relative to
        when this function was invoked. This is a convenience function implemented
        in terms of `fa_audio_schedule` and `fa_clock_time`, using the current
        stream clock.
     */
    scheduleRelative : (time : Time, action : Action, stream : Stream) -> Void;
}