
/**
    @addtogroup FaError
    
    Error handling types and functions.
 */                                             
 
module Fa.Error
{
    import Fa;
    import Fa.String;

    type Severity = enum {
        Info, Warning, Error, Misc
    };

    /** @interface fa_error_interface_t
        
        Error interface.

        Generally there is no need to implement this interface directly, the
        @ref fa_error_create_simple function returns an implementation
        suitable for most purposes.        
    */
    type Interface  = struct {
        severity : (Ptr -> Severity)*,
        message : (Ptr -> String)*,
        origin : (Ptr -> String)*
    };    

    /** @typedef fa_error_t

        A type implementing the error interface.

        If you cast a value to this type, you must assure that it implements
        @ref fa_error_interface_t, conversely if you cast a value from
        this type you can assume that it implements @ref fa_error_t.
        
        You can check whether an arbitrary reference is an error using
        @ref fa_error_check.
     */
    type Error = opaque;

    check     : Ptr -> Bool;
    log       : (Ptr,Error) -> Void; // Ptr ignored

    severity  : Error -> Severity;
    message   : Error -> String;
    origin    : Error -> String;
    format    : (Bool,Error) -> String;

    /** @typedef fa_error_callback_t
        
        An error handler routine.
     */
    type Callback = ((Ptr,Error) -> Void)*;
    
    createSimple : (Severity, String, String) -> Error;
}

