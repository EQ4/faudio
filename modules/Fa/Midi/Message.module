
/** 
    Immutable MIDI messages.

    @par Literals
    - `midi(note_on, 60, 127)`
    - `midi(note_off, 60, 127)`
    - `midi(0x9, 60, 127)`
    - `midi_sysex(buffer)`

    @par Implements 
    - fa_equal_t
    - fa_order_t
    - fa_string_show_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    
 */
module Fa.Midi.Message
{
    import Fa.Std;
    import Fa.Pair;
    import Fa.Buffer;
    
    type Status = enum {
        NoteOff,
        NoteOn,
        AfterTouch,
        ControlChange,
        ProgramChange,
        ChannelPressure,
        PitchWheel,
        Sysex 
    };     

    type Channel = Int;    
    type Data    = Int;    

    /** A MIDI message, which is either *simple* or *system exclusive*.
     */
    type Message = opaque;

    /** Creates a simple message from the given components.
        @param status   The status byte.
        @param data1    The first data byte.
        @param data2    The second data byte.
        @return         A new Midi message.
     */
    createSimple  : (Status, Int, Int) -> Message;
    
    /** Creates a sysex message from the given data buffer (not including F0 and F7).
        @param data     Raw data buffer (transfered).
        @return         A new sysex message.
     */
    createSysex   : Buffer -> Message;
    
    /** Copy the given midi message.
     */
    copy          : Message -> Message;
    
    /** Destroy the given midi_message message.
     */
    destroy       : Message -> Void;

    /** Return whether the given midi_message message is a simple message.

            fa_midi_message_is_sysex(a) == !fa_midi_message_is_simple(x)
     */
    isSimple      : Message -> Bool;
    
    /** Returns the status and channel part of a MIDI message.

        @warning
            Fails if the given message is not simple.
            Should only be used in conjunction with fa_midi_message_is_simple.
     */
    simpleData    : Message -> Pair;
    
    /** Return the operation part of the status byte of given MIDI message.

        @warning
            Fails if the given message is not simple.
            Should only be used in conjunction with fa_midi_message_is_simple.
     */
    status        : Message -> Status;
    
    /** Return the channel part of the status byte of a given MIDI message.

        @warning
            Fails if the given message is not simple.
            Should only be used in conjunction with fa_midi_message_is_simple.
     */
    channel       : Message -> Channel;

    /** Return whether the given MIDI message is a sysex message.

            fa_midi_message_is_sysex(a) == !fa_midi_message_is_simple(x)
     */
    isSysex       : Message -> Bool;

    /** Return the data buffer of a sysex message, not including the surrounding `F0` and `F7` bytes.

        @warning
            Fails if the given message is not a sysex message.
            Should only be used in conjunction with fa_midi_message_is_sysex.
     */
    sysexData     : Message -> Buffer;
}

