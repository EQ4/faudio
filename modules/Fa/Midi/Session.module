
/**
    Provides real-time MIDI.

    @par Sessions, devices and streams implement 
    - fa_destroy_t
    - fa_string_show_t

    @par Devices also implement 
    - fa_equal_t

    @see 
    - @ref Devices
 */
module "transient" Fa.Midi.Session
{
    import Fa.List;
    import Fa.Pair;
    import Fa.Action;
    import Fa.Time;
    import Fa.Clock;
    import Fa.Error;
    
    /** A MIDI session.
     */
    type Session = opaque;

    /** A callback to receive MIDI sessions.
     */
    type SessionCallback = ((Ptr, Session) -> Session)*;

    /** A callback to be invoked upon changes to the MIDI setup.
     */
    type StatusCallback = Nullary;

    /** Begin a new midi session.

        @return
            A new session.
        @par Errors
            Fails if the session could not be started.
     */
    beginSession : () -> Session;
    /** End the given session.

        @param session
            Session to end.
     */
    endSession : Session -> Void;
    /** Begin a new session, and retain it for the duration of a call to the given function.

        The given function will be called once after the session has created. The session
        will be ended after the callback function has returned. If an error occurs while
        starting the session, the error callback is invoked in place of the session callback.

        @param callback                     Function to receive the sesssion.
        @param error_callback               Function to receive eventual errors.
        @param error_data, session_data     Data closed over by the callbacks.
     */
    withSession : (
        SessionCallback, Ptr, 
        Callback, Ptr) -> Void;

    /** Get all currently active MIDI sessions. Note that at most one midi session
        can be active at the same time, so this function returns a list of zero or
        one elements.
        
        @returns A list of @ref fa_midi_session_t.
     */
    currentSessions : () -> List;
    
    /** End all currently active MIDI sessions.
        
        @returns The null pointer if successful, or an error value otherwise.
     */
    endAllSessions : () -> Ptr;

    /** Get all active midi devices of the given session.

        @param session   The session.
        @return
            A list of @ref fa_midi_device_t.
     */
    all : Session -> List;      // [Device]

    /** Get the standard devices of the given session.

        @param session   The session.
        @return
            A pair of @ref fa_midi_device_t representing the default input and
            output device, respectively, or an error if at least one of them is not available.
     */
    default : Session -> Pair;  // (Device,Device)

    
    /** Register a callback to be invoked when a hardware change is detected.

        Note that this function will not modify the devices available from a 
        session, you have to start a new session to get a fresh snapshot.
        
        Multiple callbacks can be registered this way. All registered callbacks
        are associated with a session and will be removed when the session ends.

        @param callback
            Callback to register.
        @param callback_data
            Data closed over by the callback function.
        @param session
            Session on which to register the callback.
        @warning
            Experimental.
     */
    addStatusCallback : (StatusCallback, Ptr, Session) -> Void;
    
 }