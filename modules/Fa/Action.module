
/** 
    Scheduling actions.
    
    The action types represent a single interaction with a running stream, such
    as a note or a control change.
    
    Actions can be *scheduled* on both real-time and non-real-time 
    devices: in the first case they are carried out when the internal clock of
    the stream reaches the scheduled time, in the latter case they are simply
    carried out at the appropriate time.
    
    For scheduling actions, see @ref fa_audio_schedule, @ref fa_midi_schedule
    or @ref fa_signal_run.

    @par Literals
    - `set`
    - `get`
    - `accum`
    - `send`

    @par Implements 
    - fa_copy_t
    - fa_destroy_t
    - fa_string_show_t

    @see 

 */
module Fa.Action
{
    import Fa;
    import Fa.Pair;
    import Fa.List;
    import Fa.Signal; // For UnaryDouble TODO factor out
    
    /** The abstract type of actions.
    */
    type Action = opaque;

    /** A nullary function that also receives time.
     */
    type NullaryWithTime = ((Ptr, Time) -> Ptr)*;

    /** A predicate that also receives time.
     */
    type PredWithTime = ((Ptr, Time, Ptr) -> Bool)*;

    /** Channel on which to carry out the action.
    */
    type Channel = Int;

    /** Name of external processor to receive the action.
    */
    type Name = String;

    /** Value to send.
    */
    type Value = Ptr;

    /** The `null` action that does nothing.
     */
    null : () -> Action;

    /** Copy the given action.
     */
    copy : Action -> Action;
    
    /** Destroy the given action.
     */
    destroy : Action -> Void;

    /** The `get` action reads a single global bus.

        The resulting action must be destroyed by the caller.
        
        @param channel
            Channel to read from.
        @param function
            Function to receive value.
        @param data
            Context pointer.
     */
    get : (Channel, UnaryDouble, Ptr) -> Action;

    /** The `set` action updates a single global bus.

        The resulting action must be destroyed by the caller.
        
        @param channel
            Channel to update.
        @param value
            Value to set.
     */
    set : (Channel, Double) -> Action;

    /** The `accum` action updates a single global bus by applying
        a function to its previous value.

        The resulting action must be destroyed by the caller.
        
        @param channel
            Channel to update.
        @param function
            Function to apply.
        @param data
            Data closed over by the function.
     */
    accum : (Channel, UnaryDouble, Ptr) -> Action;

    /** The `send` action sends a message, the type of which depends on
        the type of receiver. Often this is @ref fa_midi_message_t or 
        a value implementing @ref fa_dynamic_t.

        The resulting action must be destroyed by the caller.
        
        @param name
            Name of receiver.
        @param value
            Value to send.
     */
    send : (Name, Value) -> Action;


    /** Return whether the given action is a get action.
      */
    isGet : Action -> Bool;
    
    /** Get the channel of a get action.
     */
    getChannel : Action -> Channel;
    
    /** Get the function of a get action.
     */
    getFunction : Action -> UnaryDouble;
    
    /** Get the data of a get action.
     */
    getData : Action -> Ptr;     


    /** Return whether the given action is a set action.
      */
    isSet : Action -> Bool;

    /** Get the channel of a set action.
     */
    setChannel : Action -> Channel;
    
    /** Get the value of a set action.
     */
    setValue : Action -> Double;
    
    
    /** Return whether the given action is an accumulation action.
      */
    isAccum : Action -> Bool;
    
    /** Get the channel of an accumulation action.
     */
    accumChannel : Action -> Channel;
    
    /** Get the function of an accumulation action.
     */
    accumFunction : Action -> UnaryDouble;
    
    /** Get the data of an accumulation action.
     */
    accumData : Action -> Ptr;

    
    /** Return whether the given action is a send action.
      */
    isSend : Action -> Bool;
    
    /** Get the name of an send action.
     */
    sendName : Action -> Name;
    
    /** Get the value of an send action.
     */
    sendValue : Action -> Value;


    
    /** Repeat the given action indefinitely.
     */
    repeat : (interval : Time, action : Action) -> Action;

    /** Join a list of actions into a single compond action.
        TODO document
     */
    many : (actions : List) -> Action;
    
    /** Creates a derived action from the given action that executes íf and only given predicate holds.
        The predicate function is called for every occurence.
     */
    if : (pred : Pred, predData : Ptr, action : Action) -> Action;

    /** Creates a derived action from the given action that executes as long as the given predicate holds.
        The predicate function is called for every occurence.
     */
    while : (pred : Pred, predData : Ptr, action : Action) -> Action;

    /** Creates a derived action from the given action that executes as long as the given predicate
        does *not* hold.
        
        The predicate function is called for every occurence.
     */
    until : (pred : Pred, predData : Ptr, action : Action) -> Action;

    /** Creates a derived action from the given action that executes íf and only given predicate holds.
        The predicate function is called for every occurence.
        
        This is exactly like @ref fa_action_if, except that it also includes time.
     */
    ifWithTime : (pred : PredWithTime, predData : Ptr, action : Action) -> Action;

    /** Creates a derived action from the given action that executes as long as the given predicate holds.
        The predicate function is called for every occurence.
        
        This is exactly like @ref fa_action_while, except that it also includes time.
     */
    whileWithTime : (pred : PredWithTime, predData : Ptr, action : Action) -> Action;

    /** Creates a derived action from the given action that executes as long as the given predicate
        does *not* hold.
        
        The predicate function is called for every occurence.

        This is exactly like @ref fa_action_until, except that it also includes time.
     */
    untilWithTime : (pred : PredWithTime, predData : Ptr, action : Action) -> Action;

    /** Convert a unary function to an action.
     */
    do : (Nullary, Ptr) -> Action;

    /** Convert a unary function to an action.
        
        This is exactly like @ref fa_action_do, except that it also includes time.
     */
    doWithTime : (NullaryWithTime, Ptr) -> Action;




    /** Returns whether the given action is simple or not.
     */
    isSimple : Action -> Bool;

    /** Returns whether the given action is compound or not.
     */
    isCompound : Action -> Bool;
    
    /** Given a compound action, return the minimum offset to its tail.
     */
    compoundInterval : Action -> Time;

    /** Given a compound action, return its head (nullable).
     */
    compoundFirst : Action -> Action; // Nullable

    /** Given a compound action, return its tail (nullable).
     */
    compoundRest : Action -> Action; // Nullable
}

