
/**
    @addtogroup FaMidi

    Real-time midi device.

    @par Sessions, devices and streams implement 
    - fa_destroy_t
    - fa_string_show_t

    @par Devices also implement 
    - fa_equal_t

    @par Streams also implement 
    - fa_message_sender_t
    - fa_message_receiver_t
    
    @see 
    - @ref Devices
 */
module Fa.Midi
{
    import Fa.List;
    import Fa.Pair;
    import Fa.Device;
    import Fa.Action;
    import Fa.Time;
    import Fa.Error;

    type Device = opaque;
    type Session = opaque;
    type Stream = opaque;
    type SessionCallback = ((Ptr, Session) -> Session)*;
    type StreamCallback = ((Ptr, Stream) -> Stream)*;
    type StatusCallback = Nullary;

    /** Begin a new midi session.

        @return
            A new session.
        @par Errors
            Fails if the session could not be started.
     */
    beginSession : () -> Session;
    /** End the given session.

        @param session
            Session to end.
     */
    endSession : Session -> Void;
    /** Begin a new session, and retain it for the duration of a call to the given function.

        The given function will be called once after the session has created. The session
        will be ended after the callback function has returned. If an error occurs while
        starting the session, the error callback is invoked in place of the session callback.

        @param callback                     Function to receive the sesssion.
        @param error_callback               Function to receive eventual errors.
        @param error_data, session_data     Data closed over by the callbacks.
     */
    withSession : (
        SessionCallback, Ptr, 
        Callback, Ptr) -> Void;

    /** Get all active midi devices of the given session.

        @param session   The session.
        @return
            A list of @ref fa_midi_device_t.
     */
    all : Session -> List;      // [Device]
    /** Get the standard devices of the given session.

        @param session   The session.
        @return
            A pair of @ref fa_midi_device_t representing the default input and
            output device, respectively.
     */
    default : Session -> Pair;  // (Device,Device)
    /** Get the standard input device of the given session.
        @param session   The session.
     */
    defaultInput : Session -> Device;
    /** Get the standard output device of the given session.
        @param session   The session.
     */
    defaultOutput : Session -> Device;
    
    /** Set a callback to be invoked when a status change is detected on the
        given session (mainly useful for hardware setup changes).

        Note that this function will not modify the devices in a session, you have to
        restart the session to get a fresh snapshot.

        @param device   The device.
        @warning
            On OS X this function must be called from the main thread.
     */
    setStatusCallback : (StatusCallback, Ptr, Session) -> Void;

    /** Return the name of the given device.
        @param device   The device.
     */
    name : Device -> String;
    /** Return the host name of the given device.
        @param device   The device.
     */
    hostName : Device -> String;
    /** Return whether the given device has input or not.
        @param device   The device.
     */
    hasInput : Device -> Bool;
    /** Return whether the given device has output or not.
        @param device   The device.
     */
    hasOutput : Device -> Bool;

    /**
        Open a stream on the given devices.

        @param device   The device.
        @return         A new stream or an error if no stream could be opened.
     */
    openStream : Device -> Stream;
    /**
        Close the given stream.
        @param session
            Stream to close.
     */
    closeStream : Stream -> Void;
    /**
        Run a stream on the given devices.

        @param device
            The device.
        @param callback
            Function to receive the stream.
        @param error_callback
            Function to receive eventual errors.
     */
    withStream : (
        Device, 
        StreamCallback, Ptr, 
        Callback, Ptr
        ) -> Void;
    
    /**
        Schedule an action on the stream.
        @warning Experimental
     */
    schedule : (Time, Action, Stream) -> Void;

    // openAll : Session -> List;  // [Stream]
    // closeAll : Session -> List;  // [Stream]
    // withAll : (Session, StreamsCallback, Ptr, Callback, Ptr) -> Void;  // [Stream]
}

