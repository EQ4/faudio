
/**
    Provides real-time MIDI.

    @par Sessions, devices and streams implement 
    - fa_destroy_t
    - fa_string_show_t

    @par Devices also implement 
    - fa_equal_t

    @see 
    - @ref Devices
 */
module Fa.Midi
{
    import Fa.List;
    import Fa.Pair;
    import Fa.Action;
    import Fa.Time;
    import Fa.Clock;
    import Fa.Error;

    /** A MIDI device.
     */
    type Device = opaque;

    /** A MIDI session.
     */
    type Session = opaque;
    
    /** A MIDI stream.
     */
    type Stream = opaque;
    
    /** A callback to receive MIDI sessions.
     */
    type SessionCallback = ((Ptr, Session) -> Session)*;
    
    /** A callback to receive MIDI streams.
     */
    type StreamCallback = ((Ptr, Stream) -> Stream)*;
    
    /** A callback to be invoked upon changes to the MIDI setup.
     */
    type StatusCallback = Nullary;

    /** A callback to be invoked whenever a message is received.
     */
    type MessageCallback = Unary;


    /** Begin a new midi session.

        @return
            A new session.
        @par Errors
            Fails if the session could not be started.
     */
    beginSession : () -> Session;
    /** End the given session.

        @param session
            Session to end.
     */
    endSession : Session -> Void;
    /** Begin a new session, and retain it for the duration of a call to the given function.

        The given function will be called once after the session has created. The session
        will be ended after the callback function has returned. If an error occurs while
        starting the session, the error callback is invoked in place of the session callback.

        @param callback                     Function to receive the sesssion.
        @param error_callback               Function to receive eventual errors.
        @param error_data, session_data     Data closed over by the callbacks.
     */
    withSession : (
        SessionCallback, Ptr, 
        Callback, Ptr) -> Void;

    /** Get all currently active MIDI sessions. Note that at most one midi session
        can be active at the same time, so this function returns a list of zero or
        one elements.
        
        @returns A list of @ref fa_midi_session_t.
     */
    currentSessions : () -> List;
    
    /** End all currently active MIDI sessions.
        
        @returns The null pointer if successful, or an error value otherwise.
     */
    endAllSessions : () -> Ptr;

    /** Get all active midi devices of the given session.

        @param session   The session.
        @return
            A list of @ref fa_midi_device_t.
     */
    all : Session -> List;      // [Device]

    /** Get the standard devices of the given session.

        @param session   The session.
        @return
            A pair of @ref fa_midi_device_t representing the default input and
            output device, respectively, or an error if at least one of them is not available.
     */
    default : Session -> Pair;  // (Device,Device)

    /** Get the standard input device of the given session.
        @param session   The session.
        @return
            A device or an error if there are no input devices available.
     */
    defaultInput : Session -> Device;

    /** Get the standard output device of the given session.
        @param session   The session.
        @return
            A device or an error if there are no output devices available.
     */
    defaultOutput : Session -> Device;
    
    /** Register a callback to be invoked when a hardware change is detected.

        Note that this function will not modify the devices available from a 
        session, you have to start a new session to get a fresh snapshot.
        
        Multiple callbacks can be registered this way. All registered callbacks
        are associated with a session and will be removed when the session ends.

        @param callback
            Callback to register.
        @param callback_data
            Data closed over by the callback function.
        @param session
            Session on which to register the callback.
        @warning
            Experimental.
     */
    addStatusCallback : (StatusCallback, Ptr, Session) -> Void;

    /** Return the name of the given device.
        @param device   The device.
     */
    name : Device -> String;
    /** Return the host name of the given device.
        @param device   The device.
     */
    hostName : Device -> String;
    /** Return whether the given device has input or not.
        @param device   The device.
     */
    hasInput : Device -> Bool;
    /** Return whether the given device has output or not.
        @param device   The device.
     */
    hasOutput : Device -> Bool;

    /**
        Open a stream on the given devices.

        @param device   The device.
        @return         A new stream or an error if no stream could be opened.
     */
    openStream : Device -> Stream;
    /**
        Close the given stream.
        @param session
            Stream to close.
     */
    closeStream : Stream -> Void;
    /**
        Run a stream on the given devices.

        @param device
            The device.
        @param callback
            Function to receive the stream.
        @param error_callback
            Function to receive eventual errors.
     */
    withStream : (
        Device, 
        StreamCallback, Ptr, 
        Callback, Ptr
        ) -> Void;


    /** Register a callback to be invoked when a message is received.

        Multiple callbacks can be registered this way. All registered callbacks
        are associated with a stream and will be removed when the stream is stopped
        or its associated session ends.

        @param callback
            Callback to register.
        @param callback_data
            Data closed over by the callback function.
        @param session
            Stream on which to register the callback.
        @warning
            Experimental.
     */
    addMessageCallback : (MessageCallback, Ptr, Stream) -> Void;

    /** Associate the given clock with the given stream.
        @param stream The stream.
        @param The clock.
     */
    setClock : (Stream, Clock) -> Void;

    /** Return the clock associated with a given stream.
        @param stream The stream.
        @return A clock.
     */
    getClock : Stream -> Clock;
    
    /**
        Schedule an action on the stream.
        
        The action will be run as soon as the time of the stream (as
        reported by its clock) is greater than or equal to the given due time.
     */
    schedule : (Time, Action, Stream) -> Void;

    /**
        Schedule an action on the stream.

        The action will be run when the given time has passed, relative to
        when this function was invoked. This is a convenience function implemented
        in terms of `fa_audio_schedule` and `fa_clock_time`, using the current
        stream clock.
     */
    scheduleRelative : (Time, Action, Stream) -> Void;
}

