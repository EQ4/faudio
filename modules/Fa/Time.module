
/**
    Time values.
    
    This type represent a point in time relative to a stream-specific *start time*.

    The represeentation supports small divisions of a second. Values longer than a
    day are supported, but must be represented explicitly as a number of days, since
    weeks, months, years and so on would require a calendar representation.

    To *deconstruct* a time interval into its components, use `fa_time_days`,
    `fa_time_hours` and so on. To *convert* a type into a single numeric value
    such as number of seconds, use `fa_time_to_seconds` and so on. 
    
    For example:
    
    ~~~c    
    fa_time_minutes(hms(0,4,33))    => 4
    fa_time_seconds(hms(0,4,33))    => 33

    fa_time_to_minutes(hms(0,4,33)) => 4*60 + 33 = 273
    ~~~

    @par Literals
    - `hms(0,1,30)`
    - `days(2)`
    - `hours(2)`
    - `minutes(3)`
    - `seconds(4)`
    - `milliseconds(3501)`
    - `microseconds(3500421)`
    - `divisions(1, 3)`
    - `fa_add(minutes(1), milliseconds(100))`
    - `fa_subtract(hours(0), seconds(2))`

    @par Implements
    - fa_equal_t
    - fa_order_t
    - fa_string_show_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    - fa_number_t

 */
module Fa.Time
{
    import Fa;
    import Fa.Ratio;
    import Fa.String;

    /** The abstract type of times.
     */
    type Time = opaque;

    /** A number of days.
     */
    type Days = Int32;

    /** A number of hours.
     */
    type Hours = Int32;

    /** A number of minutes.
     */
    type Minutes = Int32;

    /** A number of seconds.
     */
    type Seconds = Int32;

    /** A number of milliseconds.
     */
    type Milliseconds = Int64;


    // Constructors
    /** Create a new time value.
        @param days
            Number of days.
        @param hours
            Number of hours.
        @param minutes
            Number of minutes.
        @param seconds
            Number of seconds (destroyed).
        @return
            A new time value.
     */
    create      : (Days, Hours, Minutes, Ratio) -> Time;
    /**
        Copy the given time value.
     */
    copy        : Time -> Time;
    /**
        Destroy the given time value.
     */
    destroy     : Time -> Void;

    // Introspection
    /**
        Return the number of whole days in this time value.

        @param time
            Time value.
        @return
            Integer representing this time in days modulo one.
     */
    days        : Time -> Int32;
    /**
        Return the number of whole hours in this time value.

        @param time
            Time value.
        @return
            Integer representing this time in hours modulo one.
     */
    hours       : Time -> Int32;
    /**
        Return the number of whole minutes in this time value.

        @param time
            Time value.
        @return
            Integer representing this time in minutes modulo one.
     */
    minutes     : Time -> Int32;
    /**
        Return the number of whole seconds in this time value.

        @param time
            Time value.
        @return
            Integer representing this time in seconds modulo one.
     */
    seconds     : Time -> Int32;
    /**
        Return the fractions of a second in this time value.

        @param time
            Time value.
        @return
            Rational number, representing the remainder of time in seconds over one.
     */
    divisions   : Time -> Ratio;

    /** Print the time as an ISO 8601 duration.

        The ISO represenation use decimal fractions of a second, and may lose precision. For example
        the duration of 1 min 24 1/3 sec would be represented as `P0000-00-00T00:01:24.3333`.
     */
    toIso           : Time -> String;

    /** Convert the time to seconds.
        This may lose precision.

        @param time
            Time value.
     */
    toSeconds       : Time -> Seconds;

    /** Convert the time to milliseconds.
        This may lose precision.

        @param time
            Time value.
     */
    toMilliseconds  : Time -> Milliseconds;

    /** The system time type.

        This is the same as `time_t` in the standard C header `time.h`.
     */
    type System = opaque; 
    
    // /** The system CPU time type.
    //  */
    // type Cpu    = opaque; 
    // 
    // /** Convert system time to a time value.
    //     Generally, system time is seconds since the Unix epoch.
    //  */
    // fromSystem  : System -> Time;
    // /** Convert system CPU time to a time value.
    //  */
    // fromCpu     : Cpu -> Time;
    // /** Get the system time.
    //  */
    // system      : () -> System;
    // /** Get the system CPU time.
    //  */
    // cpu         : () -> Cpu;
    //                                      
}

