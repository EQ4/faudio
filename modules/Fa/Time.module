
/**
    @addtogroup FaTime

    Aribitrary precision time interval.

    This type uses standard time units, with arbitrary divisions of a second. Allthough
    day is the longest unit, times longer than a day are supported by this type; they are
    simply expressed as days instead of years, weaks and months. Thus no particular
    calendar has to be adopted.

    To *deconstruct* a type, use `fa_time_days`, `fa_time_hours` etc. To *convert* a
    type to a numeric type (such as number of milliseconds), use
    `fa_time_to_milliseconds` etc. For example:
    
        fa_time_minutes(hms(0,4,33))    = 4
        fa_time_seconds(hms(0,4,33))    = 33
        fa_time_to_minutes(hms(0,4,33)) = 4*60 + 33 = 273

    @par Literals
    - `hms(0,1,30)`
    - `days(2)`
    - `hours(2)`
    - `minutes(3)`
    - `seconds(4)`
    - `milliseconds(3501)`
    - `microseconds(3500421)`
    - `divisions(1, 3)`
    - `fa_add(minutes(1), milliseconds(100))`
    - `fa_subtract(hours(0), seconds(2))`

    @par Implements
    - fa_equal_t
    - fa_order_t
    - fa_string_show_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    - fa_number_t

 */
module Fa.Time
{
    import Fa;
    import Fa.Ratio;
    import Fa.String;

    type Time = opaque;

    // Constructors
    /** Create a new time interval.
        @param days
            Number of days.
        @param hours
            Number of hours.
        @param minutes
            Number of minutes.
        @param seconds
            Number of seconds (destroyed).
        @return
            A new time value.
     */
    create      : (Int32, Int32, Int32, Ratio) -> Time;
    /**
        Copy the given time interval.
     */
    copy        : Time -> Time;
    /**
        Destroy the given time interval.
     */
    destroy     : Time -> Void;

    // Introspection
    /**
        Return the number of whole days in this time interval.

        @param time
            Time interval.
        @return
            Integer representing this time in days modulo one.
     */
    days        : Time -> Int32;
    /**
        Return the number of whole hours in this time interval.

        @param time
            Time interval.
        @return
            Integer representing this time in hours modulo one.
     */
    hours       : Time -> Int32;
    /**
        Return the number of whole minutes in this time interval.

        @param time
            Time interval.
        @return
            Integer representing this time in minutes modulo one.
     */
    minutes     : Time -> Int32;
    /**
        Return the number of whole seconds in this time interval.

        @param time
            Time interval.
        @return
            Integer representing this time in seconds modulo one.
     */
    seconds     : Time -> Int32;
    /**
        Return the fractions of a second in this time interval.

        @param time
            Time interval.
        @return
            Rational number, representing the remainder of time in seconds over one.
     */
    divisions   : Time -> Ratio;

    /** Print the time as an ISO 8601 duration.

        The ISO represenation use decimal fractions of a second, and may lose precision. For example
        the duration of 1 min 24 1/3 sec would be represented as `P0000-00-00T00:01:24.3333`.
     */
    toIso           : Time -> String;
    /** Convert the time to seconds.
        This may lose precision.

        @param time
            Time interval.
     */
    toSeconds       : Time -> Int32;
    toMilliseconds  : Time -> Int32;

    // System and CPU time
    type System = opaque; 
    type Cpu    = opaque; 

    /** Convert system time to a time interval.
        Generally, system time is seconds since the Unix epoch.
     */
    fromSystem  : System -> Time;
    /** Convert system CPU time to a time interval.
     */
    fromCpu     : Cpu -> Time;
    /** Get the system time.
     */
    system      : () -> System;
    /** Get the system CPU time.
     */
    cpu         : () -> Cpu;

    
    // Clocks
    
    // /** @interface fa_time_clock_interface_t */
    // type ClockInterface = struct {
    //     time     : (Ptr -> Time)*,
    //     tickRate : (Ptr -> Double)*,
    //     ticks    : (Ptr -> Int64)*
    // };                 
    // 
    // type Clock = opaque;
    // 
    // time     : Clock -> Time;
    // tickRate : Clock -> Double;
    // ticks    : Clock -> Int64;
    // 
    // getSystemClock      : () -> Clock;
    // getSystemPrecClock  : () -> Clock;
    // getCpuClock         : () -> Clock;
}

