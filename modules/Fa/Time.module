
/**
    @addtogroup FaTime

    Aribitrary precision time interval.

    This type uses standard time units, with arbitrary divisions of a second. Allthough
    day is the longest unit, times longer than a day are supported by this type; they are
    simply expressed as days instead of years, weaks and months. Thus no particular
    calendar has to be adopted.

    To *deconstruct* a type, use `fa_time_days`, `fa_time_hours` etc. To *convert* a
    type to a numeric type (such as number of milliseconds), use
    `fa_time_to_milliseconds` etc. For example:
    
        fa_time_minutes(hms(0,4,33))    = 4
        fa_time_seconds(hms(0,4,33))    = 33
        fa_time_to_minutes(hms(0,4,33)) = 4*60 + 33 = 273

    @par Literals
    - `hms(0,1,30)`
    - `days(2)`
    - `hours(2)`
    - `minutes(3)`
    - `seconds(4)`
    - `milliseconds(3501)`
    - `microseconds(3500421)`
    - `divisions(1, 3)`
    - `fa_add(minutes(1), milliseconds(100))`
    - `fa_subtract(hours(0), seconds(2))`

    @par Implements
    - fa_equal_t
    - fa_order_t
    - fa_string_show_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    - fa_number_t

 */
module Fa.Time
{
    import Fa;
    import Fa.Ratio;
    import Fa.String;

    type Time = opaque;

    // Constructors
    create      : (Int32, Int32, Int32, Ratio) -> Time;
    copy        : Time -> Time;
    destroy     : Time -> Void;

    // Introspection
    days        : Time -> Int32;
    hours       : Time -> Int32;
    minutes     : Time -> Int32;
    seconds     : Time -> Int32;
    divisions   : Time -> Ratio;

    toIso           : Time -> String;
    toSeconds       : Time -> Int32;
    toMilliseconds  : Time -> Int32;

    // System and CPU time
    type System = opaque; 
    type Cpu    = opaque; 

    fromSystem  : System -> Time;
    fromCpu     : Cpu -> Time;
    system      : () -> System;
    cpu         : () -> Cpu;

    
    // Clocks
    
    // /** @interface fa_time_clock_interface_t */
    // type ClockInterface = struct {
    //     time     : (Ptr -> Time)*,
    //     tickRate : (Ptr -> Double)*,
    //     ticks    : (Ptr -> Int64)*
    // };                 
    // 
    // type Clock = opaque;
    // 
    // time     : Clock -> Time;
    // tickRate : Clock -> Double;
    // ticks    : Clock -> Int64;
    // 
    // getSystemClock      : () -> Clock;
    // getSystemPrecClock  : () -> Clock;
    // getCpuClock         : () -> Clock;
}

