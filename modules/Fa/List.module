
/**
    Immutable list data structure.

    @par Literals
    - `list(1, 2, 3)`

    @par Display
    - `[1,2,3]`
    
    @par Iteration
    ~~~
    fa_for_each (x, list(1,2,3))
    {
        fa_print("%s\n", x);
    }
    ~~~

    @par Implements
    - fa_equal_t
    - fa_order_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    - fa_string_show_t

    @see
    - [Data structures](@ref DataStructures)

 */
module Fa.List
{
    import Fa;

    type List   = opaque;

    // Constructors

    /** Create an empty list.

        The returned list must be destroyed by passing to a destructive function.

        @return
            A new list.
        @par Performance
            O(1)
     */
    empty : () -> List;

    /** Create a new list containing the given element.

        The returned list must be destroyed by passing to a destructive function.

        @param value
            Value to store.
        @return
            A new list.
        @par Performance
            O(1)
     */
    single : Ptr -> List;

    /** Create a new list by inserting the given element at the beginning of the given list.

        The returned list must be destroyed by passing to a destructive function.

        @param head
            Value to form head of list.
        @param tail
            List to form tail of list.
        @return
            A new list.
        @par Performance
            O(1)
     */
    cons : (Ptr, List) -> List;

    /** Create a new list by inserting the given element at the beginning of the given list.

        The returned list must be destroyed by passing to a destructive function.

        @param head
            Value to form head of list.
        @param tail
            List to form tail of list.
        @return
            A new list.
        @par Performance
            O(1)
     */
    dcons : (Ptr, List) -> List;
    
    /** Create a list by repeating the given element.
     */
    repeat : (Int, Ptr) -> List;
    
    /** Create a list from the given range.
     */
    enumerate : (Int, Int) -> List;

    /** Copy the given list.

        The returned list must be destroyed by passing to a destructive function.

        @par Performance
            O(1)
     */
    copy : List -> List;

    /** Destroy the given list.

        @par Performance
            O(n)
     */
    destroy : List -> Void;


    // Predicates

    /** Return whether the given list is empty.

        @par Performance
            O(1)
     */
    isEmpty : List -> Bool;

    /** Return whether the given list has a single element.
        @par Performance
            O(1)
     */
    isSingle : List -> Bool;

    /** Return the lenght of the given list.
        @par Performance
            O(n)
     */
    length : List -> Int;


    // Sequential access

    /** Return the first element of the given list.
        @par Performance
            O(1)
     */
    head : List -> Ptr;

    /** Return all elements but the first of the given list.
        @par Performance
            O(1)
     */
    tail : List -> List;

    /** Return all elements but the first of the given list.
        @par Performance
            O(1)
     */
    dtail : List -> List;

    /** Return all elements but the last of the given list.
        @par Performance
            O(n)
     */
    init : List -> List;
    
    /** Return all elements but the last of the given list.
        @par Performance
            O(n)
     */
    dinit : List -> List;
    
    /** Return the last element of the given list.
        @par Performance
            O(n)
     */
    last : List -> Ptr;

    
    // Misc operations
    
    /** Return the result of appending the given lists.
        @par Performance
            O(n)
     */
    append : (List, List) -> List;
    
    /** Return the result of appending the given lists.
        @par Performance
            O(n)
     */
    dappend : (List, List) -> List;
    
    /** Return the reverse of the given list.
        @par Performance
            O(n)
     */
    reverse : List -> List;

    /** Return the reverse of the given list.
        @par Performance
            O(n)
     */
    dreverse : List -> List;
    
    /** Return the given list sorted.
        @par Performance
            O(n log n)
     */
    sort : List -> List;

    /** Return the given list sorted.
        @par Performance
            O(n log n)
     */
    dsort : List -> List;

    
    // Random access
    
    /** Return the *n* leading elements of the given list.
        @par Performance
            O(n)
     */
    take : (Int, List) -> List;
    
    /** Return the *n* leading elements of the given list.
        @par Performance
            O(n)
     */
    dtake : (Int, List) -> List;
    
    /** Return the all but the *n* leading elements of the given list.
        @par Performance
            O(n)
     */
    drop : (Int, List) -> List;
    
    /** Return the all but the *n* leading elements of the given list.
        @par Performance
            O(n)
     */
    ddrop : (Int, List) -> List;
    
    /** List index operator.
        @returns
            The nth element of the given list.
        @par Performance
            O(n)
     */
    index : (Int, List) -> Ptr;
    
    /** Return the given range of the given list.
        @par Performance
            O(n)
     */
    range : (Int, Int, List) -> List;
    
    /** Insert the given element into the given list.
        @par Performance
            O(n)
     */
    insert : (Int, Ptr, List) -> List;
    
    /** Insert the given element into the given list.
        @par Performance
            O(n)
     */
    dinsert : (Int, Ptr, List) -> List;
    
    /** Insert the given range into the given list.
        @par Performance
            O(n)
     */
    insertRange : (Int, List, List) -> List;

    /** Insert the given range into the given list.
        @par Performance
            O(n)
     */
    dinsertRange : (Int, List, List) -> List;
    
    /** Remove the given element from the given list.
        @par Performance
            O(n)
     */
    remove : (Int, List) -> List;
    
    /** Remove the given element from the given list.
        @par Performance
            O(n)
     */
    dremove : (Int, List) -> List;
    
    /** Remove the given range from the given list.
        @par Performance
            O(n)
     */
    removeRange : (Int, Int, List) -> List;
    
    /** Remove the given range from the given list.
        @par Performance
            O(n)
     */
    dremoveRange : (Int, Int, List) -> List;

    
    // Searching
    
    /** Return whether the given list contains the given element.
        @par Performance
            O(n)
     */
    has : (Ptr, List) -> Bool;

    /** Return the first element satisfying the given predicate in the
        list, if found.
        @param list     List.
        @param value    Value to search for.
        @return         Index of the found value (optional).
        @par Performance
            O(log n)
     */
    find : (Pred, Ptr, List) -> Ptr;

    /** Return the index of the first occurance given element in the
        list, or a negative value if no such element is found
        @par Performance
            O(n)
     */
    indexOf : (Ptr, List) -> Int;

    /** Return the index of the first element satisfying the given predicate in the
        list, or a negative value if no such element is found.
        @par Performance
            O(log n)
     */
    findIndex : (predicate : Pred, predicateData : Ptr, input : List) -> Int;

    /** Return a list that is the same as the given list with duplicates removed.
        @par Performance
            O(n^2)
     */
    removeDuplicates : List -> List;

    // Zips

    /** Create a list containing the paired contents of the given lists.

        @par Example
            
            fa_list_zip(fa_list(1,2,3), fa_list(4,5,6)) == fa_list(fa_pair_create(1,4), fa_pair_create(2,5), fa_pair_create(3,6))

        @par Performance
            O(n)
     */
    zip : (List, List) -> List;

    // Maps and folds
    
    /** Return the given list with all elements not satisfying the given predicate removed.
        @par Performance
            O(n)
     */
    filter : (predicate : Pred, predicateData : Ptr, input : List) -> List;
    
    /** Return the given list with all elements not satisfying the given predicate removed.
        @par Performance
            O(n)
     */
    dfilter : (predicate : Pred, predicateData : Ptr, input : List) -> List;
    
    /** Return the result of applying the given function to all elements of the given list.

        @par Laws

            map(apply1, id, xs)                == xs
            map(apply1, f, map(apply1, g, xs)) == map(apply1, comp(f, g), xs)

        @par Performance
            O(n)
     */
    map : (function : Unary, functionData : Ptr, input : List) -> List;
    
    /** Return the result of applying the given function to all elements of the given list.

        @par Laws

            map(apply1, id, xs)                == xs
            map(apply1, f, map(apply1, g, xs)) == map(apply1, comp(f, g), xs)

        @par Performance
            O(n)
     */
    dmap : (function : Unary, functionData : Ptr, input : List) -> List;
    
    /**
     Map over the given list and join the results.
     
        This function is useful to apply functions from singletons to lists.
     
        @par Laws
     
            joinMap(apply1, single, xs) == xs`
     
        @par Performance
            O(n)
     
     */
    joinMap : (Unary, Ptr, List) -> List;
    djoinMap : (Unary, Ptr, List) -> List;
    
    /** Concatenate all elements of the given list.

        The given list must contain lists only.

        @par Performance
            O(n)
     */
    join : List -> List;
    
    /** Concatenate all elements of the given list.

        The given list must contain lists only.

        @par Performance
            O(n)
     */
    djoin : List -> List;

    /** Fold over the given list from left to right.

        @par Performance
            O(n)
     */
    foldLeft : (Binary, Ptr, Ptr, List) -> Ptr;
    
    /** Fold over the given list from left to right.

        @par Performance
            O(n)
     */
    dfoldLeft : (Binary, Ptr, Ptr, List) -> Ptr;

    
    // Conversions
    
    toList : List -> List;
}

