
/**
    Mutable atomic references.

    @par Literals
    - `atomic()`

    @par Implements
    - fa_equal_t
    - fa_order_t
    - fa_copy_t
    - fa_destroy_t
    - fa_string_show_t

    @see
    - [Data structures](@ref DataStructures)
 */
module Fa.Atomic
{
    import Fa;
    import Fa.Std;

    type Atomic = opaque;

    /** Create a new atomic reference.
        @par Atomicity
            Non-atomic
     */
    create  : () -> Atomic;

    /** Copy the given atomic reference.
        @par Atomicity
            Non-atomic
     */
    copy    : Atomic -> Atomic;

    /** Swap contents of the given atomic reference.
        @par Atomicity
            Non-atomic
     */
    swap    : (Atomic, Atomic) -> Void;

    /** Destroy the given atomic reference.
        @par Atomicity
            Non-atomic
     */
    destroy : Atomic -> Void;



    /** Compares the given value with the current value of the given atomic reference,
        replacing it if successful.

        @param a   The atomic reference.
        @param old Old value.
        @param new New value.
        @return
            Whether comparison was successful, i.e. whether the values where exchanged.
        @par Atomicity
            Atomic
     */
    exchange : (Atomic, Ptr, Ptr) -> Bool;

    /** Return the current value of the given atomic reference.
        @par Atomicity
            Atomic
     */
    get     : Atomic -> Ptr;

    /** Update the given atomic value by applying the given pure function.

        @param atomic   Atomic reference.
        @param func     Function to be applied to the value.
        @param data     Value to be passed to the function.

        @par Atomicity Atomic
     */
    set     : (Atomic, Ptr) -> Void;

    /** Set the given given atomic reference.

        @par Atomicity Atomic
     */
    modify  : (Atomic, Unary, Ptr) -> Void;
    

    // TODO increment : (Atomic, Int32) -> Void;
}

