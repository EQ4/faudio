
/** 
    @addtogroup FaString
    
    Immutable string type.

    @par Literals
    - `string("foo")`

    @par Implements 
    - fa_equal_t
    - fa_order_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    - fa_string_show_t
    
    @see
    - [Data structures](@ref DataStructures)
    
 */
module Fa.String
{
    import Fa;
    
    /**
        @typedef fa_string_utf8_t
        A UTF-8 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.

        @typedef fa_string_utf16_t
        A UTF-16 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.

        @typedef fa_string_utf32_t
        A UTF-32 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.
     */
    type Utf8  = Char8*;
    type Utf16 = Char16*;
    type Utf32 = Char32*;

    /**
        @typedef fa_string_t
        An immutable Unicode string.

        @typedef fa_string_file_path_t
        A file path.
     */
    type String = opaque;

    /** Create an empty string.

        The returned string should be destroyed by the caller.
     */
    empty   : () -> String;

    /** Create a single-char string.

        The returned string should be destroyed by the caller.
     */
    single  : Char16 -> String;

    /** Create a string by repeating the given character.

        The returned string should be destroyed by the caller.
     */
    repeat  : (Int, Char16) -> String;

    /** Copy the given string.

        The returned string should be destroyed by the caller.
     */
    copy    : String -> String;

    /** Append the given strings.

        The returned string should be destroyed by the caller.
     */
    append  : (String, String) -> String;
    dappend : (String, String) -> String;

    /** Destroy the given string.
     */
    destroy : String -> Void;
    
    /** Return the number of characters in the given string.
     */
    length : String -> Int;
    /** Return the character at the given position in the string.
        @param pos
        @param str
     */
    charAt : (Int,String) -> Char16;

    /** @interface fa_string_show_t 
        String conversion interface.
    */
    type Show  = struct {
        show : (Ptr -> String)*
    };

    show     : Ptr -> String;
    
    /** Behaves like the identity function on strings and as [show](@ref fa_string_show)
        on all other value.
        @see [Show](@ref fa_string_show_t)
      */
    toString : Ptr -> String;
    
    /** Generic JSON conversion.
        @param a    Value implementing [Show](@ref fa_string_show_t) or [Dynamic](@ref fa_string_dynamic_t).
      */
    toJson   : Ptr -> String;
    
    /** Generic JSON conversion.
        @param string   A JSON string.
      */
    fromJson : String -> Ptr;
    
    /** Encode the given string as UTF-8.

        @param  str String to encode.
        @return
            A heap-allocated encoded string.
     */
    toUtf8       : String -> Utf8;

    /** Encode the given string as UTF-16.

        @param  str String to encode.
        @return
            A heap-allocated encoded string.
     */
    toUtf16      : String -> Utf16;

    /** Convert a string to a the string representation used by the platform.

        * On Mac OS X and iOS, `CFStringRef` is used.
     */
    toNative     : String -> Ptr;

    /** Deencode a string from UTF-8.

        @param  str Encoded string.
        @return
            A new string.
     */
    fromUtf8     : Utf8   -> String;

    /** Deencode a string from UTF-16.

        @param  str Encoded string.
        @return
            A new string.
     */
    fromUtf16    : Utf16  -> String;

    /** Convert a value of the string representation used by the platform to a string.

        * On Mac OS X and iOS, `CFStringRef` is used.
     */
    fromNative   : Ptr    -> String;

    /** Return true iff the given string matches the given regular expression.
        @param expr   A regular expression string.
        @param string String to match.
     */
    matches : (String,String) -> Bool;  // regex, input

    /** Format an integer.
        @param format
            A printf-style format string.
        @param value
            Integer value.
        @return
            A new formatted string.
     */
    formatIntegral : (Char*, Long) -> String;
    /** Format a floating-point value.
        @param format
            A printf-style format string.
        @param value
            Numeric value.
        @return
            A new formatted string.
     */
    formatFloating : (Char*, Double) -> String;



    // /** Map over the given string and join the results.
    // 
    //         This function is useful to apply functions from single characters to strings.
    // 
    //         @par Laws
    // 
    //             joinMap(apply1, single, xs) == xs`
    // 
    //         @par Performance
    //             O(n)
    //      */
    //     joinMap
}

