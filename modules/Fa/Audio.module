
/**
    Real-time audio devices. These device run processors on the input and output
    the underlying system, typically physical audio interfaces. A running audio
    computation is represented by a *stream*. Access to the current device setups
    is provided by *sessions*.

    @par Sessions implement
    - fa_equal_t
    - fa_destroy_t (sessions and streams)
    - fa_string_show_t

    Devices implement [Equal](@ref fa_equal_t) and [Show](@ref fa_string_show_t),
    but now destroy, as they are always managed by the underlying session.

    Stream implements [Clock](@ref fa_time_clock_t) by counting the number
    of processed samples. Precision is usually limited to the current frame size.

    Stream also implements [SenderInterface](@ref fa_message_sender_t) and
    [ReceiverInterface](@ref fa_message_sender_t), dispatching messages to the underlying
    processor network. The address of a processor can be obtained by @ref fa_processor_address.

    @see
    - @ref Devices
 */
module Fa.Audio
{
    import Fa.List;
    import Fa.Pair;
    import Fa.Device;
    import Fa.Error;
    import Fa.Signal;

    type Session = opaque;
    type Device  = opaque;
    type Stream  = opaque;
    type SessionCallback = ((Ptr, Session) -> Session)*;
    type StreamCallback = ((Ptr, Stream) -> Stream)*;
    type StatusCallback = Nullary;

    /** Begin a new audio session.

         @return
             A new session (errable).
         @par Errors
             Returns an error if the session could not be started.
      */
    beginSession : () -> Session;
    
    
    /** End the given session.

        @param session
            Session to end.
     */
    endSession : Session -> Void;
    
    /** Begin a new session, and retain it for the duration of a call to the given function.

        The given function will be called once after the session has created. The session
        will be ended after the callback function has returned. If an error occurs while
        starting the session, the error callback is invoked in place of the session callback.

        @param callback                     Function to receive the sesssion.
        @param error_callback               Function to receive eventual errors.
        @param error_data, session_data     Data closed over by the callbacks.
     */
    withSession : (
        SessionCallback, Ptr,
        Callback, Ptr) -> Void;

    /** Get all active audio devices of the given session.

        @param session   The session.
        @return
            A list of @ref fa_audio_device_t.
     */
    all : Session -> List;      // [Device]
    
    /** Get the standard devices of the given session.

        @param session   The session.
        @return
            A pair of @ref fa_audio_device_t representing the default input and
            output device, respectively.
     */
    default : Session -> Pair;  // (Device,Device)
    
    /** Get the standard input device of the given session.
        @param session   The session.
     */
    defaultInput : Session -> Device;
    
    /** Get the standard output device of the given session.
        @param session   The session.
     */
    defaultOutput : Session -> Device;
    
    /** Set a callback to be invoked when a status change is detected on the
        given session (mainly useful for hardware setup changes).

        Note that this function will not modify the devices in a session, you have to
        restart the session to get a fresh snapshot.

        @param device   The device.
     */
    setStatusCallback : (StatusCallback, Ptr, Session) -> Void;

    /** Return the name of the given device.
        @param device   The device.
     */
    name : Device -> String;
    
    /** Return the host name of the given device.
        @param device   The device.
     */
    hostName : Device -> String;
    
    /** Return whether the given device has input or not.
        @param device   The device.
     */
    hasInput : Device -> Bool;
    
    /** Return whether the given device has output or not.
        @param device   The device.
     */
    hasOutput : Device -> Bool;
    
    inputChannels : Device -> Int;
    outputChannels : Device -> Int;

    /**
        Open a stream on the given devices.

        @param input, output    Devices to provide data source and sink.
        @param processor        Processor to run over the devices.
        @return                 A new stream (errable).
        @par Errors
            Returns an error if the session could not be started.
     */
    openStream : (Device, Signal, Device) -> Stream;
    
    /**
        Close the given stream.
        @param session          Stream to close.
     */
    closeStream : Stream -> Void;
    
    /**
        Run a stream on the given devices.

        @param input
            Input device.
        @param processor        Processor to run over the devices.
        @param input            Output device.
        @param callback         Function to receive the stream.
        @param error_callback   Function to receive eventual errors.
     */
    withStream : (
        Device, Signal, Device,
        StreamCallback, Ptr,
        Callback, Ptr
        ) -> Void;

}

