
/**
    Provides real-time audio.
    
    These device run processors on the input and output
    the underlying system, typically physical audio interfaces. A running audio
    computation is represented by a *stream*. Access to the current device setups
    is provided by *sessions*.

    @par Implements
    - fa_equal_t
    - fa_destroy_t (sessions and streams)
    - fa_string_show_t

    @see
    - @ref Devices
 */
module Fa.Audio
{
    import Fa.List;
    import Fa.Pair;
    import Fa.Error;
    import Fa.Signal;
    import Fa.Action;
    import Fa.Clock;
    
    /** An audio session.
     */
    type Session = opaque;
    
    /** An audio device.
     */
    type Device  = opaque;
    
    /** An audio stream.
     */
    type Stream  = opaque;

    /** A callback to receive audio sessions.
     */
    type SessionCallback = ((Ptr, Session) -> Session)*;
    
    /** A callback to receive audio streams.
     */
    type StreamCallback = ((Ptr, Stream) -> Stream)*;
    
    /** A callback to be invoked upon changes to the audio setup.
     */
    type StatusCallback = Nullary;

    /** A callback to be invoked whenever a message is received.
     */
    type MessageCallback = Unary;

    /** An audio processor, or a function from a list of signals to a list of signals.
     */
    type Proc = ((Ptr,List) -> List)*;

    /** Begin a new audio session.

         @return
             A new session (errable).
         @par Errors
             Returns an error if the session could not be started.
      */
    beginSession : () -> Session;
    
    
    /** End the given session.

        @param session
            Session to end.
     */
    endSession : Session -> Void;
    
    /** Begin a new session, and retain it for the duration of a call to the given function.

        The given function will be called once after the session has created. The session
        will be ended after the callback function has returned. If an error occurs while
        starting the session, the error callback is invoked in place of the session callback.

        @param callback                     Function to receive the sesssion.
        @param error_callback               Function to receive eventual errors.
        @param error_data, session_data     Data closed over by the callbacks.
     */
    withSession : (
        SessionCallback, Ptr,
        Callback, Ptr) -> Void;


    /** Get all currently active audio sessions. Note that at most one audio session
        can be active at the same time, so this function returns a list of zero or
        one elements.
        
        @returns A list of @ref fa_audio_session_t.
     */
    currentSessions : () -> List;
    
    /** End all currently active audio sessions.
        
        @returns The null pointer if successful, or an error value otherwise.
     */
    endAllSessions : () -> Ptr;

    /** Get all active audio devices of the given session.

        @param session   The session.
        @return
            A list of @ref fa_audio_device_t.
     */
    all : Session -> List;      // [Device]
    
    /** Get the standard devices of the given session.

        @param session   The session.
        @return
            A pair of @ref fa_audio_device_t representing the default input and
            output device, respectively.
     */
    default : Session -> Pair;  // (Device,Device)
    
    /** Get the standard input device of the given session.
        @param session   The session.
     */
    defaultInput : Session -> Device;
    
    /** Get the standard output device of the given session.
        @param session   The session.
     */
    defaultOutput : Session -> Device;
    
    /** Register a callback to be invoked when a hardware change is detected.

        Note that this function will not modify the devices available from a 
        session, you have to start a new session to get a fresh snapshot.
        
        Multiple callbacks can be registered this way. All registered callbacks
        are associated with a session and will be removed when the session ends.

        @param callback
            Callback to register.
        @param callback_data
            Data closed over by the callback function.
        @param session
            Session on which to register the callback.
        @warning
            Experimental.
     */
    addStatusCallback : (StatusCallback, Ptr, Session) -> Void;

    /** Return the session associated with the given device.
        @param device   The device.
     */
    session : Device -> Session;

    /** Return the name of the given device.
        @param device   The device.
     */
    name : Device -> String;
    
    /** Return the host name of the given device.
        @param device   The device.
     */
    hostName : Device -> String;
    
    /** Return whether the given device has input or not.
        @param device   The device.
     */
    hasInput : Device -> Bool;
    
    /** Return whether the given device has output or not.
        @param device   The device.
     */
    hasOutput : Device -> Bool;
    
    /** Return the number of inputs of the given device.
        @param device   The device.
     */
    inputChannels : Device -> Int;
    
    /** Return the number of outputs of the given device.
        @param device   The device.
     */
    outputChannels : Device -> Int;
    
    /**
        Open a stream on the given devices.

        @param input, output    Devices to provide data source and sink.
        @param processor        Processor to run over the devices.
        @return                 A new stream (errable).
        @par Errors
            Returns an error if the session could not be started.
     */
    openStream : (Device, Device, Proc, Ptr) -> Stream;
    
    /**
        Close the given stream.
        @param session          Stream to close.
     */
    closeStream : Stream -> Void;
    
    /**
        Run a stream on the given devices.

        @param input
            Input device.
        @param processor
            Processor to run over the devices.
        @param input
            Output device.
        @param callback
            Function to receive the stream.
        @param error_callback
            Function to receive eventual errors.
     */
    withStream : (
        Device, Device, Proc, Ptr,
        StreamCallback, Ptr,
        Callback, Ptr
        ) -> Void;

    /** Return the devices associated with the given stream.
        @param stream   The stream.
        @return A list of @ref fa_audio_device_t
     */
    devices : Stream -> List;

    /** Return the clock associated with a given stream.
        @param stream The stream.
        @return A clock.
     */
    streamClock : Stream -> Clock;

    /** Register a callback to be invoked when a message is received.

        Multiple callbacks can be registered this way. All registered callbacks
        are associated with a stream and will be removed when the stream is stopped
        or its associated session ends.

        @param callback
            Callback to register.
        @param callback_data
            Data closed over by the callback function.
        @param session
            Stream on which to register the callback.
        @warning
            Experimental.
     */
    addMessageCallback : (MessageCallback, Ptr, Stream) -> Void;
    
    /**
        Schedule an action on the stream.
        @warning Experimental
     */
    schedule : (Time, Action, Stream) -> Void;
}

