
/** 
    Immutable ordered map data structure.

    @par Literals
    - `map(string("name"),           string("hans"), 
           string("favouriteColor"), string("blue"))`

    @par Requires 
    - fa_order_t

    @par Implements 
    - fa_equal_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    - fa_string_show_t

    @see 
    - [Data structures](@ref DataStructures)
    
 */
module Fa.Map 
{
    import Fa;
    import Fa.Pair;
    import Fa.List;
    import Fa.String;
    
    type Map = opaque;
    type Key = Ptr;
    
    type Destructor = (Ptr -> Void)*;

    /** Create an empty map. */
    empty : () -> Map;
    
    /** Copy the given map. */
    copy : Map -> Map;
    
    /** Destroy the given map. */
    destroy : Map -> Void;
    
    /** Set the destructor for the given map. (Tip: use fa_destroy)
    */
    setValueDestructor : (Map, Destructor) -> Void;

    // Size
    /** Return the number of entries in the given map. */
    size : Map -> Int;
    
    /** Return whether the given map is empty. */
    isEmpty : Map -> Bool;
    
    /** Return whether the given map has a single entry. */
    isSingle : Map -> Bool;

    // Lookup function
    /** Add an element to the map if not present. */
    add : (Key, Ptr, Map) -> Map;
    
    /** Add an element to the map, replacing if already present. */
    set : (Key, Ptr, Map) -> Map;
    
    /** Remove the given key if present. */
    remove : (Key, Map) -> Map;
    
    /** Add an element to the map if not present. */
    dadd : (Key, Ptr, Map) -> Map;
    
    /** Add an element to the map, replacing if already present.*/
    dset : (Key, Ptr, Map) -> Map;
    
    /** Remove the given key if present. */
    dremove : (Key, Map) -> Map;
    
    // Predicates
    /** Return the element stored at the given key, or `null` if the key does not exist. */
    get : (Key, Map) -> Ptr;
    
    /** Return the element stored at the given key, or `null` if the key does not exist.
        The key is destroyed. */
    dget : (Key, Map) -> Ptr;
        
    /** Convert the given list to a map. */
    fromList : List -> Map;
    
    /** Convert the given list to a map. The list is destroyed. */
    fromList : List -> Map;
        
    /** Convert the given map to a list. */
    toList : Map -> List;
    
    /** Get a list of all keys in the map. The keys are not copied, so don't free them! */
    getKeys : Map -> List;
    
    logCount : () -> Void;
}

