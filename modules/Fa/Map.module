
/** 
    @addtogroup FaMap
    
    Immutable ordered map data structure.

    @par Literals
    - `map(string("name"),           string("hans"), 
           string("favouriteColor"), string("blue"))`

    @par Requires 
    - fa_order_t

    @par Implements 
    - fa_equal_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    - fa_string_show_t

    @see 
    - [Data structures](@ref DataStructures)
    
 */
module Fa.Map 
{
    import Fa;
    import Fa.Pair;
    import Fa.List;
    import Fa.String;
    
    type Map = opaque;
    type Key = Ptr;

    // Constructors
    empty            : () -> Map;
    copy             : Map -> Map;
    destroy          : Map -> Void;

    // Size
    size             : Map -> Int;
    isEmpty          : Map -> Bool;
    isSingle         : Map -> Bool;

    // Lookup function
    add              : (Key, Ptr, Map) -> Map;
    set              : (Key, Ptr, Map) -> Map;
    remove           : (Key, Map) -> Map;
    dadd             : (Key, Ptr, Map) -> Map;
    dset             : (Key, Ptr, Map) -> Map;
    dremove          : (Key, Map) -> Map;
    addEntry         : (Pair, Map) -> Map;
    setEntry         : (Pair, Map) -> Map;
    removeEntry      : (Pair, Map) -> Map;

    // Predicates
    get              : (Key, Map) -> Ptr;
    hasKey           : (Key, Map) -> Bool;
    hasElem          : (Ptr, Map) -> Bool;
    hasEntry         : (Pair, Map) -> Bool;
    isSubmapOf       : (Map, Map) -> Bool;
    isProperSubmapOf : (Map, Map) -> Bool;

    // Set operations
    sum              : (Map, Map) -> Map;
    product          : (Map, Map) -> Map;
    difference       : (Map, Map) -> Map;
    // power            : Map -> Map;

    // Functor
    map              : (Unary, Ptr, Map) -> Map;

    // Conversions   
    fromPair         : Pair -> Map;
    fromList         : List -> Map;
    toList           : Map -> List;
}

