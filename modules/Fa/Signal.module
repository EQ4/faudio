
/**
    @addtogroup FaSignal
    
    Provides signals.

    @par Implements
    - fa_copy_t
    - fa_string_show_t
    - fa_number_t
    - fa_destroy_t
    
 */
module Fa.Signal
{
    import Fa;    
    import Fa.Pair;
    import Fa.Time;
    import Fa.Buffer;
    
    type Signal = opaque;

    /** Like fa_unary_t, but speficied on signals.
    */
    type UnarySignal    = ((Ptr, Signal) -> Signal)*;

    /** Like fa_unary_t, but speficied on doubles.
    */
    type UnaryDouble    = ((Ptr, Double) -> Double)*;

    /** Like fa_binary_t, but speficied on doubles.
    */
    type BinaryDouble   = ((Ptr, Double, Double) -> Double)*;


    /**
        Returns a signal representing the elapsed time in seconds.
        
        @par Semantic $$y(t) = t$$.
     */
    time        : () -> Signal;

    /**
        Returns a signal representing white noise.
        
        @par Semantic $$y(t) = random(-1,1)$$.
     */
    random      : () -> Signal;
    
    /**
        Returns a signal representing the given constant value.

        @param value
            Constant value.
        @par Semantic $$y(c)(t) = c$$.
     */
    constant    : Double -> Signal;

    /**
        Returns a signal that applies the given function to output of the given signal.
        
        @param name          
            Name of resulting processor. This is used for printing and some optimization techniques.
        @param function, data
            Function to lift and pointer to data closed over by the function.
        @param signal
            Signal to apply to the resulting processor.
        @return
            Result of appying the given processor to the given signal.

        @par Semantic $$y(f,a)(t) = f(a(t))$$.
     */
    lift        : ( String, UnaryDouble, Ptr, Signal )            -> Signal;

    /**
        Returns a signal that applies the given function to output of the given signals.
        
        Returns a signal that applies the given function to output of the given signal.
        
        @param name          
            Name of resulting processor. This is used for printing and some optimization techniques.
        @param function, data
            Function to lift and pointer to data closed over by the function.
        @param signal1, signal2
            Signals to apply to the resulting processor.
        @return
            Result of appying the given processor to the given signals.

        @par Semantic $$y(f,a,b)(t) = f(a(t), b(t))$$.
     */
    lift2       : ( String, BinaryDouble, Ptr, Signal, Signal )   -> Signal;

    /**
        Returns a signal that closes over the given signal function in a feedback loop.

        The given signal function receives its own output with an implicit one-sample delay.
        
        @par Semantic $$y(f)(t) = f(y(t-1))$$.
     */
    loop        : ( UnarySignal, Ptr )                            -> Signal;

    /**
        Returns a signal that delays the given signal by the given number of 
        samples. 
                
        @par Semantic $$y(n,a)(t) = \\begin{cases} 0 & \mbox{if} (t-n) < 0   \\\\   a(t-n) & \mbox{if} (t-n) \\geq 0 \\end{cases}$$.

     */
    delay       : ( Int, Signal )                                 -> Signal;

    insert : ( String, Int, Int, Int, Int, Signal ) -> Signal;


    /** The primitive input signal, reading from the bus of the given number.
     */
    input       : ( Int )                                         -> Signal;

    /** The primitive output signal, writing to the bus of the given number
        and returning the written value.
     */
    output      : ( Int, Int, Signal )                            -> Signal;

    /** Returns a signal that evaluates both of the given signal, and returns
        the result of the first one.
     */
    latter : (Signal, Signal) -> Signal;

    /** Returns a signal that evaluates both of the given signal, and returns
        the result of the second one.
     */
    former : (Signal, Signal) -> Signal;


    /** Run the given signal for *n* samples, printing the values to `stdout`.
     */
    print : ( Int, List, Signal ) -> Void;    

    /** Run the given signal for *n* samples, writing the results to the given buffer.

        The given pointer must point to a buffer of at least `samples * sizeof(double)`.

        @param samples
            Number of samples to generate.
        @param controls
            List of control values (must be pairs of @ref fa_time_t and @ref fa_action_t).
            Optional, a null pointer is interpreted as the empty list.
        @param signal
            Signal to run.
        @param buffer
            Buffer to receive result.
     */
    run : ( Int, List, Signal, Double* ) -> Void;

    /** Run the given signal, writing the results to a freshly created @ref buffer_t.
        The resulting buffer must be freed by the caller.

        @param samples
            Number of samples to generate.
        @param controls
            List of control values (must be pairs of fa_time_t and fa_action_t).
            Optional, a null pointer is interpreted as the empty list.
        @param signal
            Signal to run.
     */
    runBuffer : ( Int, List, Signal ) -> Buffer;

    /** Run the given signal, writing the results to the given file.

        @param samples
            Number of samples to generate.
        @param controls
            List of control values (must be pairs of fa_time_t and fa_action_t).
            Optional, a null pointer is interpreted as the empty list.
        @param signal
            Signal to run.
        @param path
            Name of file to write.
     */
    runFile : ( Int, List, Signal, String ) -> Ptr;

    

    /**
        Index a buffer at the given sample.

        This signal writes raw buffer indices, so to read a buffer *b*
        of *n* channels at channel *c* and sample *n*, do `record(b, i*n+c)`.

        The read is performed modulo `length(b)/8`, so negative or larger values wrap
        around. Thus you can loop a buffer by simply incrementing the index or play it
        backwards by decrementing.

        @param buffer
            Buffer to read from.
        @param index
            Sample index to read from.
     */
    play : (Buffer, Signal) -> Signal;

    /**
        Index a buffer at the given sample and returns the written value.


        @param buffer
            Buffer to write to.
        @param index
            Index to write to. If negative or larger than buffer size, nothing is written.
        @param value
            Value to write.
     */
    record : (Buffer, Signal, Signal) -> Signal;


    add                 : (Signal, Signal) -> Signal;
    subtract            : (Signal, Signal) -> Signal;
    multiply            : (Signal, Signal) -> Signal;
    power               : (Signal, Signal) -> Signal;
    divide              : (Signal, Signal) -> Signal;
    modulo              : (Signal, Signal) -> Signal;
    absolute            : Signal           -> Signal;
    
    not                 : () -> Signal;
    and                 : (Signal, Signal) -> Signal;
    or                  : (Signal, Signal) -> Signal;
    xor                 : (Signal, Signal) -> Signal;
    bitNot              : (Signal, Signal) -> Signal;
    bitAnd              : (Signal, Signal) -> Signal;
    bitOr               : (Signal, Signal) -> Signal;
    bitXor              : (Signal, Signal) -> Signal;
    shiftLeft           : (Signal, Signal) -> Signal;
    shiftRight          : (Signal, Signal) -> Signal;
    
    equal               : (Signal, Signal) -> Signal;
    lessThan            : (Signal, Signal) -> Signal;
    greaterThan         : (Signal, Signal) -> Signal;
    lessThanEqual       : (Signal, Signal) -> Signal;
    greaterThanEqual    : (Signal, Signal) -> Signal;
    
    acos                : (Signal) -> Signal;
    asin                : (Signal) -> Signal;
    atan                : (Signal) -> Signal;
    cos                 : (Signal) -> Signal;
    sin                 : (Signal) -> Signal;
    tan                 : (Signal) -> Signal;
    exp                 : (Signal) -> Signal;
    log                 : (Signal) -> Signal;
    log10               : (Signal) -> Signal;

    pow                 : (Signal, Signal) -> Signal;
    sqrt                : Signal           -> Signal;
    min                 : (Signal, Signal) -> Signal;
    max                 : (Signal, Signal) -> Signal;
    fmod                : (Signal, Signal) -> Signal;
    remainder           : (Signal, Signal) -> Signal;
    floor               : (Signal, Signal) -> Signal;
    ceil                : (Signal, Signal) -> Signal;
    rint                : (Signal, Signal) -> Signal;    

    counter             : () -> Signal;
    impulses            : (Int) -> Signal;
                           
    // isVariable : Signal -> Bool;
    // isConstant : Signal -> Bool;
    // areConstant : List -> Bool; // [Signal]
    // signalNodeCount : Signal -> Int;
    // signalTree : Signal -> Tree String;
    // requiredInputs : Signal -> Int;
    // requiredBuses : Signal -> Int;
    // requiredDelay : Signal -> Int;
    // optimize : Signal -> Signal;
    // optimize1 : Signal -> Signal;

    /** Run a signal through an external VST plug-in.
    
        @param name
            Name of plug-in.
        @param path
            Path of plug-in.
        @param inputs
            Inputs signals.
        @return
            A list of @ref fa_signal_t (outputs).
     */
    vst : (String, String, List) -> List;

    /** Run a signal through an external VST plug-in.
    
        @param name
            Name of plug-in.
        @return
            A list of @ref fa_signal_t (outputs).
     */
    fluid : String -> List;
    

    /** Convert the signal to a tree represented as set of
        nested pairs of type `(String,[...])`.
        
        This is useful for debugging the signal graph.
     */
    toTree : Signal -> Pair; // (String,[...])

    /** Convert a tree on the form `(String,[...])` to a string,
        suitable for printing.
     */
    drawTree : Pair -> String;
    
    /** Simplify a signal by removing all non-primitive constructors.
        The returned signal must be freed by the caller.

        @returns
            A simplified signal. If the given signal was already simplified,
            a copy of that signal (as per @ref fa_copy) is returned.
     */
    simplify : Signal -> Signal;

    impulse : () -> Signal;
    line : Double -> Signal;
    lowPass : (Signal, Signal, Signal, Signal, Signal) -> Signal;
    biquad : (Signal, Signal, Signal, Signal, Signal, Signal) -> Signal;

}

