
/** 
    @addtogroup FaeMidiMsg
    
    Immutable representation of Midi messages.

    @par Literals
    - `midi(note_on, 60, 127)`
    - `midi(note_off, 60, 127)`
    - `midi(0x9, 60, 127)`
    - `midi_sysex(buffer)`

    @par Implements 
    - fae_equal_t
    - fae_order_t
    - fae_string_show_t
    - fae_copy_t
    - fae_destroy_t
    - fae_dynamic_t
    
 */
module Fae.MidiMsg
{
    import Fae.Std;
    import Fae.Pair;
    import Fae.Buffer;
    
    type Status = enum {
        NoteOff,
        NoteOn,
        AfterTouch,
        ControlChange,
        ProgramChange,
        ChannelPressure,
        PitchWheel,
        Sysex 
    };     

    type Channel = Int;    
    type Data    = Int;    
    type MidiMsg = opaque;

    createSimple  : (Status, Int, Int) -> MidiMsg;
    createSysex   : Buffer -> MidiMsg;
    copy          : MidiMsg -> MidiMsg;
    destroy       : MidiMsg -> Void;

    status        : MidiMsg -> Status;
    channel       : MidiMsg -> Channel;

    isSimple      : MidiMsg -> Bool;
    simpleData    : MidiMsg -> Pair;
    isSysex       : MidiMsg -> Bool;
    sysexData     : MidiMsg -> Buffer;    
}

