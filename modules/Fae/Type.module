
/**
    @addtogroup FaeType
    
    Provides audio types. An *audio type* is either a simple type such as `i8`, or a
    compound such as `(i8, i8)`. Compound types are constructed from simple types.
    
    Each signals has an associated type, which is checked at runtime.

    Type            | Description
    ----------------| ----------------------------
    `i8`            | 8-bit integer
    `i16`           | 16-bit integer
    `i32`           | 32-bit integer
    `i64`           | 64-bit integer
    `f32`           | 32-bit floating point
    `f64`           | 64-bit floating point
    `()`            | Unit type
    `(A, B)`        | Pair of *A* and *B*
    `[A x N]`       | Vector of *A*
    `{A}`           | Frame of *A*

    @par Literals
    - `type(unit)`
    - `type(i8)`
    - `type(i16)`
    - `type(i32)`
    - `type(i64)`
    - `type(f32)`
    - `type(f64)`
    - `type(ptr)`
    - `type_pair(type(f64), type(f64))`
    - `type_vector(type(f64), 200)`
    - `type_frame(type(f64))`

    @par Implements        
    - fae_equal_t
    - fae_copy_t
    - fae_string_show_t
    - fae_destroy_t
    
 */                                             
module Fae.Type
{
    import Fae;
    import Fae.Pair;

    type Frames = Size;
    
    type Simple = enum {
        UnitType, 
        I8Type, 
        I16Type, 
        I32Type, 
        I64Type,
        F32Type,
        F64Type,
        PtrType 
    };

    type Type = opaque;
    
    // Constructors
    simple    : Simple -> Type;    
    pair      : (Type, Type) -> Type;
    vector    : (Type, Size) -> Type;
    frame     : Type -> Type;
    copy      : Type -> Type;
    destroy   : Type -> Void;

    // Special constructors
    repeat    : (Int,Type) -> Type;

    // Predicates and introspection
    isSimple  : Type -> Bool;
    isPair    : Type -> Bool;
    isVector  : Type -> Bool;
    isFrame   : Type -> Bool;
    channels  : Type -> Int;

    getSimple       : Type -> Simple;
    getPairFst      : Type -> Type;
    getPairSnd      : Type -> Type;
    getVectorBase   : Type -> Type;
    getVectorSize   : Type -> Size;
    getFrameBase    : Type -> Type;
 
    // sizeOf   : (Frames, Type) -> Size;
    // offsetOf : (Frames, Type) -> Size;
    // alignOf  : Type -> Size;
}

