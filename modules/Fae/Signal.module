
/**
    @addtogroup FaeSignal
    
    Provides signals.
    
 */
module Fae.Signal
{
    import Fae;    
    import Fae.Pair;
    import Fae.Type;
    import Fae.Time;
    
    type Signal = opaque;

    /** @typedef fae_signal_unary_signal_t
        Like fae_unary_t, but speficied on signals.
    */
    type UnarySignal    = ((Ptr, Signal) -> Signal)*;

    /** @typedef fae_signal_unary_double_t
        Like fae_unary_t, but speficied on doubles.
    */
    type UnaryDouble    = ((Ptr, Double) -> Double)*;

    /** @typedef fae_signal_binary_double_t
        Like fae_binary_t, but speficied on doubles.
    */
    type BinaryDouble   = ((Ptr, Double, Double) -> Double)*;


    time        : () -> Signal;
    random      : () -> Signal;
    constant    : Double -> Signal;
    lift        : ( String -> UnaryDouble, Ptr, Signal)           -> Signal;
    lift2       : ( String -> BinaryDouble, Ptr, Signal, Signal)  -> Signal;
    loop        : ( UnarySignal, Ptr )                            -> Signal;
    delay       : ( Int, Signal )                                 -> Signal;
    input       : ( Int )                                         -> Signal;
    output      : ( Int, Int, Signal )                            -> Signal;


/*
    add                 : () -> Signal;
    subtract            : () -> Signal;
    multiply            : () -> Signal;
    power               : () -> Signal;
    divide              : () -> Signal;
    modulo              : () -> Signal;
    absolute            : () -> Signal;

    not                 : () -> Signal;
    and                 : () -> Signal;
    or                  : () -> Signal;
    xor                 : () -> Signal;
    bitNot              : () -> Signal;
    bitAnd              : () -> Signal;
    bitOr               : () -> Signal;
    bitXor              : () -> Signal;
    shiftLeft           : () -> Signal;
    shiftRight          : () -> Signal;

    equal               : () -> Signal;
    lessThan            : () -> Signal;
    greaterThan         : () -> Signal;
    lessThanEqual       : () -> Signal;
    greaterThanEqual    : () -> Signal;

    acos                : () -> Signal;
    asin                : () -> Signal;
    atan                : () -> Signal;
    cos                 : () -> Signal;
    sin                 : () -> Signal;
    tan                 : () -> Signal;
    exp                 : () -> Signal;
    log                 : () -> Signal;
    log10               : () -> Signal;
    pow                 : () -> Signal;
    sqrt                : () -> Signal;
    abs                 : () -> Signal;
    min                 : () -> Signal;
    max                 : () -> Signal;
    fmod                : () -> Signal;
    remainder           : () -> Signal;
    floor               : () -> Signal;
    ceil                : () -> Signal;
    rint                : () -> Signal;    
    */

    isVariable : Signal -> Bool;
    isConstant : Signal -> Bool;
    areConstant : List -> Bool; // [Signal]
    signalNodeCount : Signal -> Int;
    // signalTree : Signal -> Tree String;
    requiredInputs : Signal -> Int;
    requiredBuses : Signal -> Int;
    requiredDelay : Signal -> Int;
    // optimize : Signal -> Signal;
    // optimize1 : Signal -> Signal;
    simplify : Signal -> Signal;

    latter : (Signal, Signal) -> Signal;
    former : (Signal, Signal) -> Signal;
    impulse : () -> Signal;
    line : Double -> Signal;
    lowPass : (Signal, Signal, Signal, Signal, Signal) -> Signal;
    biquad : (Signal, Signal, Signal, Signal, Signal, Signal) -> Signal;

}

