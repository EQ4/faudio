
/**
    @addtogroup FaeSignal
    
    Provides signals.
    
 */
module Fae.Signal
{
    import Fae;    
    import Fae.Pair;
    import Fae.Type;
    import Fae.Time;
    
    type Signal = opaque;

    // typeOf : Signal -> Type;


    constant            : Ptr              -> Signal;
    identity            : ()               -> Signal;
    lift                : (Unary,   Ptr)   -> Signal;
    lift2               : (Binary,  Ptr)   -> Signal;

    time                : () -> Signal;
    delay               : (Time, Signal)  -> Signal;
    fix                 : (((Ptr, Signal) -> Signal)*, Ptr) -> Signal;

/*
    add                 : () -> Signal;
    subtract            : () -> Signal;
    multiply            : () -> Signal;
    power               : () -> Signal;
    divide              : () -> Signal;
    modulo              : () -> Signal;
    absolute            : () -> Signal;

    not                 : () -> Signal;
    and                 : () -> Signal;
    or                  : () -> Signal;
    xor                 : () -> Signal;
    bitNot              : () -> Signal;
    bitAnd              : () -> Signal;
    bitOr               : () -> Signal;
    bitXor              : () -> Signal;
    shiftLeft           : () -> Signal;
    shiftRight          : () -> Signal;

    equal               : () -> Signal;
    lessThan            : () -> Signal;
    greaterThan         : () -> Signal;
    lessThanEqual       : () -> Signal;
    greaterThanEqual    : () -> Signal;

    acos                : () -> Signal;
    asin                : () -> Signal;
    atan                : () -> Signal;
    cos                 : () -> Signal;
    sin                 : () -> Signal;
    tan                 : () -> Signal;
    exp                 : () -> Signal;
    log                 : () -> Signal;
    log10               : () -> Signal;
    pow                 : () -> Signal;
    sqrt                : () -> Signal;
    abs                 : () -> Signal;
    min                 : () -> Signal;
    max                 : () -> Signal;
    fmod                : () -> Signal;
    remainder           : () -> Signal;
    floor               : () -> Signal;
    ceil                : () -> Signal;
    rint                : () -> Signal;    
    */

}

