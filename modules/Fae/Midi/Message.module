
/** 
    @addtogroup FaMidiMessage
    
    Immutable representation of Midi messages.

    @par Literals
    - `midi(note_on, 60, 127)`
    - `midi(note_off, 60, 127)`
    - `midi(0x9, 60, 127)`
    - `midi_sysex(buffer)`

    @par Implements 
    - fa_equal_t
    - fa_order_t
    - fa_string_show_t
    - fa_copy_t
    - fa_destroy_t
    - fa_dynamic_t
    
 */
module Fa.Midi.Message
{
    import Fa.Std;
    import Fa.Pair;
    import Fa.Buffer;
    
    type Status = enum {
        NoteOff,
        NoteOn,
        AfterTouch,
        ControlChange,
        ProgramChange,
        ChannelPressure,
        PitchWheel,
        Sysex 
    };     

    type Channel = Int;    
    type Data    = Int;    
    type Message = opaque;

    createSimple  : (Status, Int, Int) -> Message;
    createSysex   : Buffer -> Message;
    copy          : Message -> Message;
    destroy       : Message -> Void;

    status        : Message -> Status;
    channel       : Message -> Channel;

    isSimple      : Message -> Bool;
    simpleData    : Message -> Pair;
    isSysex       : Message -> Bool;
    sysexData     : Message -> Buffer;    
}

