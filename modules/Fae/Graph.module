
/** 
    @addtogroup FaeGraph
    
    Immutable directed graph data structure.
    
    @warning
        Not fully implemented.

    @par Literals

    @par Requires 
    - fae_equal_t

    @par Implements 
    - fae_equal_t
    - fae_copy_t
    - fae_destroy_t
    - fae_string_show_t

    @see 
    - [Data structures](@ref DataStructures)
    
 */
module Fae.Graph 
{
    import Fae;
    import Fae.Pair;
    import Fae.List;
    import Fae.String;
    
    type Graph = opaque;
    type Node = Ptr;
    type Edge = Ptr;
    type NodeList = List;
    type EdgeList = List;

    // Constructors
    empty            : () -> Graph;
    insert           : (Node,Graph) -> Graph;
    remove           : (Node,Graph) -> Graph;
    destroy          : Graph -> Void;

    // Edges
    connect          : (Node,Node,Edge,Graph) -> Graph;
    disconnect       : (Node,Node,Graph) -> Graph;

    // Introspection
    // nodes            : Graph -> NodeList;
    // edges            : Graph -> EdgeList;
    // head             : (Edge, Graph) -> Node;
    // tail             : (Edge, Graph) -> Node;
    // from             : (Node, Graph) -> EdgeList;
    // to               : (Node, Graph) -> EdgeList;
    // children         : (Node, Graph) -> NodeList;
    // parents          : (Node, Graph) -> NodeList;

    // Predicates
    // hasNode          : (Node, Graph) -> Bool;
    // hasEdge          : (Edge, Graph) -> Bool;
    // succOf           : (Node, Node, Graph) -> Bool;
    // predOf           : (Node, Node, Graph) -> Bool;
    // directSuccOf     : (Node, Node, Graph) -> Bool;
    // directPredOf     : (Node, Node, Graph) -> Bool;

    toDot            : (String,String,Graph) -> String;

    // Conversions   
    // fromList         : List -> Graph;   // [(e,(n,n))]
    // toList           : Graph -> List;   // [(e,(n,n))]
}

