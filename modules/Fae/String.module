
/** 
    @addtogroup FaeString
    
    Immutable string type.

    @par Literals
    - `string("foo")`

    @par Implements 
    - fae_equal_t
    - fae_order_t
    - fae_copy_t
    - fae_destroy_t
    - fae_dynamic_t
    - fae_string_show_t
    
    @see
    - [Data structures](@ref DataStructures)
    
 */
module Fae.String
{
    import Fae;
    
    /**
        @typedef fae_string_utf8_t
        A UTF-8 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.

        @typedef fae_string_utf16_t
        A UTF-16 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.

        @typedef fae_string_utf32_t
        A UTF-32 encoded raw string.
        This type use the endianness of the system, and is terminated by a null character.
     */
    type Utf8  = Char8*;
    type Utf16 = Char16*;
    type Utf32 = Char32*;

    /**
        @typedef fae_string_t
        An immutable Unicode string.

        @typedef fae_string_file_path_t
        A file path.
     */
    type String = opaque;
    type FilePath = String;

    // Constructors
    empty   : () -> String;
    single  : Char16 -> String;
    repeat  : (Int, Char16) -> String;
    copy    : String -> String;
    append  : (String, String) -> String;
    dappend : (String, String) -> String;
    destroy : String -> Void;
    
    // Predicate and lookup
    length : String -> Int;
    charAt : (Int,String) -> Char16;

    // map         : (Unary, Ptr, String) -> String; // (Char16 -> Char16) -> String -> String
    // joinMap     : (Unary, Ptr, String) -> String; // (Char16 -> String) -> String -> String

    /** @interface fae_string_show_t 
        String conversion interface.
    */
    type Show  = struct {
        show : (Ptr -> String)*
    };

    show     : Ptr -> String;
    toString : Ptr -> String;
    toJson   : Ptr -> String;
    fromJson : String -> Ptr;
    
    // Conversion
    toUtf8       : String -> Utf8;
    toUtf16      : String -> Utf16;
    toUtf32      : String -> Utf32;
    toCfString   : String -> Void*;
    fromUtf8     : Utf8 -> String;
    fromUtf16    : Utf16 -> String;
    fromUtf32    : Utf32 -> String;
    fromCfString : Void* -> String;

    // Matching
    matches : (String,String) -> Bool;  // regex, input

    // Formatting
    formatIntegral : (Char*, Long) -> String;
    formatFloating : (Char*, Double) -> String;
}

