
/** 
    @addtogroup Doremir
    
    Core definitions. Import \ref DoremirAudioEngine instead of this.
    
 */
module Doremir
{
    import Doremir.Std;

    type Ptr = Void*;

    type Nullary = (() -> Ptr)*;
    type Unary   = (Ptr -> Ptr)*;
    type Binary  = ((Ptr, Ptr) -> Ptr)*;

    type Pred   = (Ptr -> Bool)*;

    type Closure = struct { 
        function : Unary, 
        value    : Ptr 
    };

    /** @interface doremir_eq_t 
    */
    type Equal   = struct {
        equal : ((Ptr, Ptr) -> Bool)*
    };
    /** @interface doremir_ord_t 
    */
    type Order  = struct {
        lessThan : ((Ptr, Ptr) -> Bool)*,
        greaterThan : ((Ptr, Ptr) -> Bool)*
    };
    /** @interface doremir_num_t 
    */
    type Number = struct {
        add      : ((Ptr, Ptr) -> Ptr)*,
        subtract : ((Ptr, Ptr) -> Ptr)*,
        multiply : ((Ptr, Ptr) -> Ptr)*,
        divide   : ((Ptr, Ptr) -> Ptr)*,
        modulo   : ((Ptr, Ptr) -> Ptr)*,
        absolute : ((Ptr, Ptr) -> Ptr)*
    };

    toBool     : Ptr -> Bool;
    toInt      : Ptr -> Int;
    toInt8     : Ptr -> Int8;
    toInt16    : Ptr -> Int16;
    toInt32    : Ptr -> Int32;
    toFloat    : Ptr -> Float;
    toDouble   : Ptr -> Double;

    fromBool   : Bool -> Ptr;
    fromInt    : Int -> Ptr;
    fromInt8   : Int8 -> Ptr;
    fromInt16  : Int16 -> Ptr;
    fromInt32  : Int32 -> Ptr;
    fromFloat  : Float -> Ptr;
    fromDouble : Double -> Ptr;
    
    copy : Ptr -> Ptr;
    move : Ptr -> Ptr;
    destroy : Ptr -> Void;

    type Id = Int64;
    type Impl = (Id -> Ptr)*;
    getInterface : (Id, Ptr) -> Ptr;
}