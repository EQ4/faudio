
/** 
    @addtogroup Doremir
    
    Core definitions. Import \ref DoremirAudioEngine instead of this module.
    
 */
module Doremir
{
    import Doremir.Std;
    import "C" Doremir.Alloc;
    import "C" Doremir.Interfaces;
    
    // Basic types

    /** @typedef doremir_ptr_t
        Generic pointer type.
    */
    type Ptr = Void*;
    
    // Function types

    /** @typedef doremir_nullary_t
        A nullary function.                                             
        
        By convention, the first argument is a pointer to an environment that allow
        clients to close over variables in the environment.
    */
    type Nullary = (Ptr -> Ptr)*;

    /** @typedef doremir_unary_t
        A unary function.

        By convention, the first argument is a pointer to an environment that allow
        clients to close over variables in the environment.
    */
    type Unary   = ((Ptr, Ptr) -> Ptr)*;

    /** @typedef doremir_binary_t
        A binary function.

        By convention, the first argument is a pointer to an environment that allow
        clients to close over variables in the environment.
    */
    type Binary  = ((Ptr, Ptr, Ptr) -> Ptr)*;

    /** @typedef doremir_ternary_t
        A ternary function.

        By convention, the first argument is a pointer to an environment that allow
        clients to close over variables in the environment.
    */
    type Ternary  = ((Ptr, Ptr, Ptr, Ptr) -> Ptr)*;

    /** @typedef doremir_pred_t
        Generic predicate.

        By convention, the first argument is a pointer to an environment that allow
        clients to close over variables in the environment.
    */
    type Pred   = ((Ptr, Ptr) -> Bool)*;
    

    // Character types

    /**
        @typedef doremir_char8_t
        An 8-bit character.

        @typedef doremir_char16_t
        A 16-bit character.
        
        @typedef doremir_char32_t
        A 32-bit character.
     */
    type Char8  = Char;
    type Char16 = UInt16;
    type Char32 = UInt32;    


    // Type predicates and conversions
    
    isBool     : Ptr -> Bool;
    isInt8     : Ptr -> Bool;
    isInt16    : Ptr -> Bool;
    isInt32    : Ptr -> Bool;
    isInt64    : Ptr -> Bool;
    isFloat    : Ptr -> Bool;
    isDouble   : Ptr -> Bool;    
    isRef      : Ptr -> Bool;    

    toBool     : Ptr -> Bool;
    toInt8     : Ptr -> Int8;
    toInt16    : Ptr -> Int16;
    toInt32    : Ptr -> Int32;
    toInt64    : Ptr -> Int64;
    toFloat    : Ptr -> Float;
    toDouble   : Ptr -> Double;

    peekBool   : Ptr -> Bool;
    peekInt8   : Ptr -> Int8;
    peekInt16  : Ptr -> Int16;
    peekInt32  : Ptr -> Int32;
    peekInt64  : Ptr -> Int64;
    peekFloat  : Ptr -> Float;
    peekDouble : Ptr -> Double;

    fromBool   : Bool -> Ptr;
    fromInt8   : Int8 -> Ptr;
    fromInt16  : Int16 -> Ptr;
    fromInt32  : Int32 -> Ptr;
    fromInt64  : Int64 -> Ptr;
    fromFloat  : Float -> Ptr;
    fromDouble : Double -> Ptr;
    
    // Interface dispatcher
    
    /** @typedef doremir_id_t
        Unique identifier. Only used for interface lookup at the moment.
    */
    type Id = Int64;

    /** @typedef doremir_impl_t
        Callback to lookup an interface implementation.
    */
    type Impl = (Id -> Ptr)*;

    interface : (Id, Ptr) -> Ptr;


    // Interfaces

    /** @interface doremir_equal_t
        Equality comparison interface.
    */
    type Equal   = struct {
        equal : ((Ptr, Ptr) -> Bool)*
    };

    equal            : (Ptr, Ptr) -> Bool;
    notEqual         : (Ptr, Ptr) -> Bool;

    /** @interface doremir_order_t 
        Less-than comparison interface.
    */
    type Order  = struct {
        lessThan    : ((Ptr, Ptr) -> Bool)*,
        greaterThan : ((Ptr, Ptr) -> Bool)*
    };
    
    lessThan         : (Ptr, Ptr) -> Bool;
    greaterThan      : (Ptr, Ptr) -> Bool;
    lessThanEqual    : (Ptr, Ptr) -> Bool;
    greaterThanEqual : (Ptr, Ptr) -> Bool;
    min              : (Ptr, Ptr) -> Ptr;
    max              : (Ptr, Ptr) -> Ptr;
    
    /** @interface doremir_number_t 
        Arithmetic operations interface.
    */
    type Number = struct {
        add      : ((Ptr, Ptr) -> Ptr)*,
        subtract : ((Ptr, Ptr) -> Ptr)*,
        multiply : ((Ptr, Ptr) -> Ptr)*,
        divide   : ((Ptr, Ptr) -> Ptr)*,
        absolute : (Ptr -> Ptr)*
    };

    add         : (Ptr, Ptr) -> Ptr;
    subtract    : (Ptr, Ptr) -> Ptr;
    multiply    : (Ptr, Ptr) -> Ptr;
    divide      : (Ptr, Ptr) -> Ptr;
    absolute    : Ptr -> Ptr;

    /** @interface doremir_copy_t
        Generic copying interface.
    */
    type Copy   = struct {
        copy : (Ptr -> Ptr)*
    };

    /** @interface doremir_destroy_t
        Generic destruction interface.
    */
    type Destroy   = struct {
        destroy : (Ptr -> Void)*
    };

    copy    : Ptr -> Ptr;
    move    : Ptr -> Ptr;
    destroy : Ptr -> Void;
    // deepDestroy : Ptr -> Void;

    check   : Ptr -> Bool;
    
    print    : (Char*,Ptr) -> Void;
    dprint   : (Char*,Ptr) -> Void;    
}