
/** 
    @addtogroup Doremir
    
    Core definitions. Import \ref DoremirAudioEngine instead of this module.
    
 */
module Doremir
{
    import Doremir.Std;
    import "C" Doremir.Alloc;
    import "C" Doremir.Interfaces;

    /** @typedef doremir_ptr_t
        Generic pointer type.
    */
    type Ptr = Void*;

    /** @typedef doremir_nullary_t
        Generic nullary function.
    */
    type Nullary = (Ptr -> Ptr)*;

    /** @typedef doremir_unary_t
        Generic unary function.
    */
    type Unary   = ((Ptr, Ptr) -> Ptr)*;

    /** @typedef doremir_binary_t
        Generic binary function.
    */
    type Binary  = ((Ptr, Ptr, Ptr) -> Ptr)*;

    /** @typedef doremir_binary_t
        Generic ternary function.
    */
    type Ternary  = ((Ptr, Ptr, Ptr, Ptr) -> Ptr)*;

    /** @typedef doremir_pred_t
        Generic predicate.
    */
    type Pred   = ((Ptr, Ptr) -> Bool)*;

    /** @struct doremir_closure_t
        Generic closure.
    */
    type Closure = struct { 
        function : Unary, 
        value    : Ptr 
    };
    
    // Character types
    /**
        @typedef doremir_char8_t
        An 8-bit character.

        @typedef doremir_char16_t
        A 16-bit character.
        
        @typedef doremir_char32_t
        A 32-bit character.
     */
    type Char8  = Char;
    type Char16 = UInt16;
    type Char32 = UInt32;    

    // Interfaces
    equal            : (Ptr, Ptr) -> Bool;
    notEqual         : (Ptr, Ptr) -> Bool;
    lessThan         : (Ptr, Ptr) -> Bool;
    greaterThan      : (Ptr, Ptr) -> Bool;
    lessThanEqual    : (Ptr, Ptr) -> Bool;
    greaterThanEqual : (Ptr, Ptr) -> Bool;
    min              : (Ptr, Ptr) -> Ptr;
    max              : (Ptr, Ptr) -> Ptr;
    
    add         : (Ptr, Ptr) -> Ptr;
    subtract    : (Ptr, Ptr) -> Ptr;
    multiply    : (Ptr, Ptr) -> Ptr;
    divide      : (Ptr, Ptr) -> Ptr;
    // modulo      : (Ptr, Ptr) -> Ptr;
    absolute    : Ptr -> Ptr;

    copy    : Ptr -> Ptr;
    move    : Ptr -> Ptr;
    destroy : Ptr -> Void;
    print   : (Char*,Ptr) -> Void;

    

    /** @interface doremir_equal_t
        Equality comparison interface.
    */
    type Equal   = struct {
        equal : ((Ptr, Ptr) -> Bool)*
    };

    /** @interface doremir_order_t 
        Less-than comparison interface.
    */
    type Order  = struct {
        lessThan    : ((Ptr, Ptr) -> Bool)*,
        greaterThan : ((Ptr, Ptr) -> Bool)*
    };
    
    /** @interface doremir_copy_t
        Generic copying interface.
    */
    type Copy   = struct {
        copy : (Ptr -> Ptr)*
    };

    /** @interface doremir_destroy_t
        Generic destruction interface.
    */
    type Destroy   = struct {
        destroy : (Ptr -> Void)*
    };


    /** @interface doremir_number_t 
        Arithmetic operations interface.
    */
    type Number = struct {
        add      : ((Ptr, Ptr) -> Ptr)*,
        subtract : ((Ptr, Ptr) -> Ptr)*,
        multiply : ((Ptr, Ptr) -> Ptr)*,
        divide   : ((Ptr, Ptr) -> Ptr)*,
        absolute : (Ptr -> Ptr)*
    };

    /** @struct doremir_type_repr_t
        Represents a type at runtime.
    */
    type TypeRepr = struct {
        tag : enum { TypeInt8, TypeInt16, TypeInt32, 
                     TypeUInt8, TypeUInt16, TypeUInt32, 
                     TypeFloat, TypeDouble, 
                     TypePair, TypeList, TypeMap, TypeSet },
        args : [Ptr x 2]
    };

    /** @interface doremir_dynamic_t
        Dynamic type introspection interface.
    */
    type Dynamic = struct {
        getType : (Ptr -> TypeRepr)*
    };

    // TODO relation to Dynamic?
    typeStr : Ptr -> Char*;

    // Conversion functions
    toBool     : Ptr -> Bool;
    toInt8     : Ptr -> Int8;
    toInt16    : Ptr -> Int16;
    toInt32    : Ptr -> Int32;
    toInt64    : Ptr -> Int64;
    toFloat    : Ptr -> Float;
    toDouble   : Ptr -> Double;

    fromBool   : Bool -> Ptr;
    fromInt8   : Int8 -> Ptr;
    fromInt16  : Int16 -> Ptr;
    fromInt32  : Int32 -> Ptr;
    fromInt64  : Int64 -> Ptr;
    fromFloat  : Float -> Ptr;
    fromDouble : Double -> Ptr;
    
    /** @typedef doremir_id_t
        Unique identifier. Only used for interface lookup at the moment.
    */
    type Id = Int64;

    /** @typedef doremir_impl_t
        Callback to lookup an interface implementation.
    */
    type Impl = (Id -> Ptr)*;

    interface : (Id, Ptr) -> Ptr;
}